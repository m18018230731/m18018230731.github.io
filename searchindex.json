{"categories":[{"title":"学习笔记","uri":"https://senjianlu.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"教程翻新","uri":"https://senjianlu.com/categories/%E6%95%99%E7%A8%8B%E7%BF%BB%E6%96%B0/"},{"title":"踩坑记录","uri":"https://senjianlu.com/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"}],"posts":[{"content":" Notion 链接：https://www.notion.so/rabbir/1a25e9f6a26d4551902af651915117d7\n ","id":0,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/1a25e9f6a26d4551902af651915117d7","tags":["日语"],"title":"日语学习 「こそあど系統」","uri":"https://senjianlu.com/2021/06/japanese-ko-so-a-do-xi-tong/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/a24f7acbdba44e0ebe290fd0c3dd1907\n ","id":1,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/a24f7acbdba44e0ebe290fd0c3dd1907","tags":["日语"],"title":"日语学习 格助词「を」在自动词前的使用","uri":"https://senjianlu.com/2021/06/japanese-ge-zhu-ci-wo/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/e0d5da57af9c47c5a58df377cc4ac558\n ","id":2,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/e0d5da57af9c47c5a58df377cc4ac558","tags":["日语"],"title":"日语学习 日语词类划分整理","uri":"https://senjianlu.com/2021/06/japanese-ri-yu-ci-lei-hua-fen-zheng-li/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/eee6ce0ebd9249a9a281805aadb54582\n ","id":3,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/eee6ce0ebd9249a9a281805aadb54582","tags":["日语"],"title":"日语学习 使役、被动和使役被动","uri":"https://senjianlu.com/2021/06/japanses-shi-yi-bei-dong/","year":"2021"},{"content":"虽然 Telegram 的 APP 自带 SOCKS5 代理支持，直接配置即可使用，但是几乎配置完连上就是秒封，必须通过国内服务器做中转，即：国外服务器先安装 SOCKS5 代理，再安装 GOST 将国内机中转来的流量转发到本机 SOCKS5 对应端口；国内服务器则只需要安装 GOST 将中转流量转发至国外服务器即可。\n 我所配置的例子中流量所经历的转发过程：\n客户端 \u0026ndash;\u0026gt; 国内服务器:15555 \u0026ndash;\u0026gt;（加密）\u0026ndash;\u0026gt; 国外服务器:15554 \u0026ndash;\u0026gt;（本机转发）\u0026ndash;\u0026gt; 国外服务器:15555（SOCKS5 代理服务所在端口）\n  1、国外服务器安装 SOCKS5 代理\n不做介绍，CentOS7 直接使用我的一键脚本：CentOS7 下一键安装 SOCKS5 代理\ncurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20SOCKS5%20%E4%BB%A3%E7%90%86/install.sh | bash -s $ss5_port $ss5_username $ss5_password\r 注意安装过程中会自动开放防火墙的指定端口，如果安装完无法连接请自行检查云服务器端口组。\n检查用指令：\ncurl -x socks5://$ss5_username:$ss5_password@$IP:$ss5_port http://ip-api.com/json/?lang=zh-CN  2、国内服务器安装 GOST\n使用我克隆的 GOST 管理一键脚本：\n注：原作者：KANIKIG；脚本原地址：Multi-EasyGost\nwget --no-check-certificate -O gost.sh https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20GOST%20%E9%9A%A7%E9%81%93%E4%B8%AD%E8%BD%AC%E5%B9%B6%E9%85%8D%E7%BD%AE/gost.sh \u0026amp;\u0026amp; chmod +x gost.sh \u0026amp;\u0026amp; ./gost.sh\r 出现一下界面则说明脚本下载并启动成功，\n首先输入“1”安装，\n1\ry\r 安装成功后再次启动脚本，以提前配置好转发规则，\n./gost.sh\r 选择“7”，\n7\r 由于是国内中转机，因此选择加密隧道流量转发“2”，\n2\r 接下来的配置参考以下即可，一般选用 tls 隧道即可，IP 则需要替换为境外服务器 IP，\n国内机配置至此结束。\n3、国外服务器安装 GOST 解密隧道流量并转发至 SOCKS5 端口\n配置与国内机大同小异，不过需要选解密隧道流量而非加密隧道流量，然后将流量转发至 SOCKS5 所在端口，我这里 SOCKS5 所在 15555 端口。\n至此 GOST 隧道转发配置就完成了。\n 出现问题请按以下步骤排查：\n1、两边服务器防火墙和安全组是否都已经开放。\n2、单访问国外服务器 SOCKS5 代理服务是否可行。\n3、两边 GOST 配置是否匹配。\n ","id":4,"section":"posts","summary":"虽然 Telegram 的 APP 自带 SOCKS5 代理支持，直接配置即可使用，但是几乎配置完连上就是秒封，必须通过国内服务器做中转，即：国外服务器先安装 SOCKS5 代理，再安装 GOST 将国内","tags":[],"title":"CentOS7 下安装 SOCKS5 代理并使用 GOST 搭建加密中转隧道","uri":"https://senjianlu.com/2021/06/centos7-socks5-gost/","year":"2021"},{"content":"为了在 CentOS7 服务器下部署 Java Web 项目和使用 RabbitMQ 所留的笔记。\n 1、首先检查服务器当前 OpenJDK 版本，如果不是需要的版本请先卸载。\njava -version\r 由于这次我们使用的是下载压缩包直接解压后将路径添加至环境变量的方法，并非使用 rmp 命令等直接安装，因此如果后续要更新版本只需要更改环境变量路径即可。\nrmp 命令等安装的卸载方法请自行参考：CentOS7 卸载 OpenJDK 安装 Oracle JDK\n2、下载 Java 开发者工具包 JDK。\n官方地址：Java SE Downloads \n注：官方下载目前需要注册账号，如果你和我一样使用的 JDK 11 的话可以直接通过我的 Google 云盘分享链接进行下载。\n由于个人目前用的是 JDK 11 因此以此为例：\n注意服务器架构和下载完成包\n下载完后通过 Xftp 等工具上传至服务器。\n3、解压并移动到所需目录下（以我常用的 /opt/java 为例）。\nmkdir /opt/java\rmv jdk-11.0.11_linux-x64_bin.tar.gz /opt/java/\rcd /opt/java\rtar -xzvf jdk-11.0.11_linux-x64_bin.tar.gz\r 此时 Java 所需要添加进环境变量的路径即为：/opt/java/jdk-11.0.11\n4、添加至环境变量并使其生效。\n编辑文件\nvi /etc/profile\r 在文件末尾追加，JDK 11 以后只需添加以下环境变量：\nexport JAVA_HOME=/opt/java/jdk-11.0.11\rexport PATH=$PATH:$JAVA_HOME/bin\r  注意！JDK 11 以前还需要涉及到 JRE_HOME 以及 CLASS_PATH（以 JDK 1.8 为例）：\nexport JAVA_HOME=/home/java/jdk1.8.0_171\rexport JRE_HOME=$JAVA_HOME/jre\rexport CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\rexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\r  执行 source 命令使环境变量立即生效：\nsource /etc/profile\r 5、检查是否安装成功。\njava -version\r ","id":5,"section":"posts","summary":"为了在 CentOS7 服务器下部署 Java Web 项目和使用 RabbitMQ 所留的笔记。 1、首先检查服务器当前 OpenJDK 版本，如果不是需要的版本请先卸载。 java -version 由于这次我们使用的是下载压缩包","tags":["Java"],"title":"CentOS7 下安装 Java 环境（JDK11）","uri":"https://senjianlu.com/2020/12/centos7-jdk/","year":"2020"},{"content":"最近的新项目考虑到有分布式的需要，感觉加入消息队列不仅能增强各系统直接的协调性，对服务器资源也能提高利用效率，决定试下 RabbitMQ，于是便有了这篇 CentOS7 下安装 RabbitMQ 的笔记。\n 1、首先安装所需的依赖包。\nyum -y install epel-release\ryum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz\r 2、安装 Erlang。\n需要注意的是，RabbitMQ 的版本和 Erlang 的版本是需要匹配的，具体可以参照这里：RabbitMQ Erlang Version Requirements\n 如果你不想折腾，您可以选择直接\nyum -y install erlang\r 安装 Erlang，而这样默认安装的版本是 03.18.el7，虽然看起来没有对应版本的 RabbitMQ 可以安装，但是实测至少 3.6.5 版本的 RabbitMQ 实际上是可以验证 Erlang 版本通过并安装，后续的使用也没有问题。\n 但是在这里我还是选择安装最新的版本，反正是个人项目，在新特性和版本稳定之间有选择的情况下，前项对我的吸引力开始更大，反正记了笔记大不了回退就是了。\n# 更新 yum 源至最新\rwget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm\rrpm -Uvh erlang-solutions-1.0-1.noarch.rpm\r# 安装 Erlang\ryum install erlang\r 完成后检查 Erlang 版本\nyum info erlang\r 3、安装 RabbitMQ。\nErlang 版本为最新的话，理论上 RabbitMQ 的版本可以随便挑，这里我就挑当前最新的吧。\nwget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.17/rabbitmq-server-3.8.17-1.el7.noarch.rpm\ryum -y install socat\rrpm -ivh rabbitmq-server-3.8.17-1.el7.noarch.rpm\r 注意，3.8.17-1.el7 的 el7 所代表的就是 CentOS7 系统所适用的包 结束后检查一下\nrabbitmq-server status\r 没有问题的话将可视化管理界面一并安装：\nrabbitmq-plugins enable rabbitmq_management\r 4、启动服务并配置用户。\n首先启动服务：\nsystemctl start rabbitmq-server\rrabbitmqctl status\r 然后开放防火墙和端口组，来确保可视化管理界面也运行成功，默认地址及端口：http://127.0.0.1:15672，IP 请自行替换，出现以下界面说明启动成功。\n接下来配置用户，指令如下：\n#添加新用户，用户名为\u0026quot;root\u0026quot;，密码为\u0026quot;root\u0026quot;\rrabbitmqctl add_user root root\r#设置用户为管理员角色\rrabbitmqctl set_user_tags root administrator #授权远程访问 rabbitmqctl set_permissions -p / root \u0026quot;.\u0026quot; \u0026quot;.\u0026quot; \u0026quot;.*\u0026quot;  5、设置为开机自启动。\nsystemctl enable rabbitmq-server\r 至此结束。\n","id":6,"section":"posts","summary":"最近的新项目考虑到有分布式的需要，感觉加入消息队列不仅能增强各系统直接的协调性，对服务器资源也能提高利用效率，决定试下 RabbitMQ，于是","tags":["RabbitMQ"],"title":"CentOS7 下安装 RabbitMQ","uri":"https://senjianlu.com/2020/12/centos7-install-rabbitmq/","year":"2020"},{"content":"因为一开始没整理归类文件的习惯，把手头的主力开发机弄得很乱，索性就备份了些重要文件重装了电脑，然后就把服务器的 Nginx 配置文件全丢了\u0026hellip;\u0026hellip;剩下服务器上一堆没注释的配置连自己都看晕了，就重新学下吧。\n Nginx 反代路由的替换在同一服务器部署多项目是还是很常用的，比方说我有一个将 https://ceshiku.cn/tiny-server-proxy/ 反代到本地的 57191 端口的需求，但是又不想影响到主路由和其他项目地址例如 https://ceshiku.cn/test/ 的解析。\n我肯定不能这么写：\nlocation ^~ /tiny-server-proxy {\rproxy_pass http://localhost:57191;\r}\r 为什么呢，如果我这么写的话，那当我访问 https://ceshiku.cn/tiny-server-proxy/status 的时候，虽然能被代理到指定端口上运行的项目，但是实际上项目收到的请求路由是这样的：\n很明显多出来的 /tiny-server-proxy/ 其实是我不需要的，那我改一下：\nlocation ^~ /tiny-server-proxy/ {\rproxy_pass http://localhost:57191;\r}\r 结果收到的路由呢，如下：\n依旧是多了 /tiny-server-proxy/ 这个路径，可见在路由匹配上下功夫是没有用的，只能在 proxy_pass 后反代的端口上做更改：\nlocation ^~ /tiny-server-proxy/ {\rproxy_pass http://localhost:57191/;\r}\r 再试一下，果然可以了：\n那么 Nginx 反代到端口项目时路由部分路径替换的问题就解决了。\n 那么碰到动静分离的项目，想要访问静态资源时替换路径有该怎么操作呢，这个时间就要搬出除了 root 之外 Nginx 另一个资源映射语法了：alias\nlocation ^~ /t/ {\rroot /www/root/html/;\r}\rlocation ^~ /t/ {\ralias /www/root/html/;\r}\r 当路由和文件夹配置完全一样的情况下，当请求链接是 /t/a.html 的情况下，两个配置分别会：\nroot 的配置会返回 /www/root/html/t/a.html 的文件，alias 的配置会返回 /www/root/html/a.html 的文件，alias 所起的作用就和刚刚往反代端口后加的斜杠类似，做到因为把 location 后面配置的路径完全舍弃。\n但是用的时候还需要注意：alias 只能位于 location 块中（root 可以不放在 location 中）。\n","id":7,"section":"posts","summary":"因为一开始没整理归类文件的习惯，把手头的主力开发机弄得很乱，索性就备份了些重要文件重装了电脑，然后就把服务器的 Nginx 配置文件全丢了\u0026hellip","tags":["网站建设"],"title":"Nginx 学习（一）proxy_pass 反代路由的替换和 root 与 alias 的区别","uri":"https://senjianlu.com/2020/12/nginx-note-01/","year":"2020"},{"content":"为了在东京奥运会期间应对临时封路，紧跟日本人赶了2个月的功能，终于能休息一阵了 :)\n虽然是因为奥运会推迟而不是因为开发完成\n总之又能学点新东西了，方便记录先准备个一键推送博客的工具吧。\n 环境：Windows 10 64 位\n需要时间：10 分钟左右\n原教程：CSDN Hugo 博客的脚本快速发布博客\n 说着好听的一键脚本其实也就是把发布所需要输入的几行命令写进一个批处理文件里罢了，首先回顾下一般情况下我们完成一篇博客并发布的所有命令：\nhugo new posts/myblog01.md # 新建一片博文，当然也能去路径下之间创建.md文件\rhugo server -t pure --buildDrafts # 在localhost起博客看效果 pure换为你的theme名\rhugo --theme=pure --baseUrl=\u0026quot;https://moyu.best\u0026quot; --buildDrafts # 确保效果符合预期后生成public目录 Url换为你的博客地址\rcd public\rgit add .\rgit commit -m \u0026quot;推送\u0026quot;\rgit push -u origin master\rgit push -f # 如果报错了但是你能确定本地的是最新状态的话\r 然后开始写脚本，一般在 Windows 下直接写 .bat 脚本就行了，但是这里我们为了后期通过 Git Bash 来执行，省去每次输入 Git 账户密码的步骤，所以采用 Shell 脚本。\n直接上代码和注释：\n#!/bin/bash\recho -e \u0026quot;\\033[0;32mStart to deploy!\\033[0m\u0026quot;\r# Build the hugo project\rhugo --theme=pure --baseUrl=\u0026quot;https://moyu.best\u0026quot; --buildDrafts\r# Go to Public\rcd public\r# Add all\rgit add .\r# Commit\rgit commit -m \u0026quot;Commit by deploy.sh\u0026quot;\r# Push\rgit push -u origin master\r# Back\rcd ...\r 然后是选择用 Git Bash 的方式执行这个批处理脚本。\n选定 Git Bash 即可，然后运行！\n可以看见效果和我们手动 push 是一样的，推送成功了。\n结束~后续是可以添加 msg 作为参数传入和 catch 冲突后强制 push 的，这里就不琢磨了，等个下周用上2天好好学习一下批处理脚本吧。\n脚本下载地址：下载（记得更改 theme 主题和博客 Url）\n","id":8,"section":"posts","summary":"为了在东京奥运会期间应对临时封路，紧跟日本人赶了2个月的功能，终于能休息一阵了 :) 虽然是因为奥运会推迟而不是因为开发完成 总之又能学点新东西了，","tags":[],"title":"Windows 下 Hugo 静态博客一键推送发布","uri":"https://senjianlu.com/2020/05/hugo-auto-build/","year":"2020"},{"content":"在学习具体的权限管理之前，需要先了解一下 PostgreSQL 中权限的几个层次：\n 特殊权限，包含超级用户的权限、创建数据库的权限、创建用户以及 Login 的权限。 在数据库中创建模式 (SCHEMA) 的权限。 在模式中创建数据库对象的权限，如创建表、索引等。 查询单表，和插入、更新或删除表中数据的权限。 最低的则是只能操作表中部分字段的权限。  五种权限中，比较难理解的可能就是为什么要把创建数据库等设置为特殊权限。在这之前，我们需要先学习 PostgreSQL 中是如果对权限进行管理的。\n PostgreSQL 使用角色的概念管理数据库权限，为了方便管理，往往给一个角色赋予一系列的权限，而如果某个用户需要这些权限，则只需要直接把角色赋给用户即可。\n稍微有点绕的是在这里，PostgreSQL 中角色和用户又是没有区别的，一个用户就是一个角色，因此可以把一个用户的权限赋给另一个用户，稍稍有点难理解，但是实际操作中不会有什么阻碍。\n1、那就从创建用户开始吧。\n指令如下：\n创建角色：CREATE ROLE username [ [ WITH ] option [...] ] 创建用户：CREATE USER username [ [ WITH ] option [...] ]  在这里我一般情况下使用 CREATE USER，因为这样默认出来的用户是有 \u0026ldquo;Login\u0026rdquo; 权限的，不需要再去额外设置一下了。用户的其他属性用两种方法创建出来不会有任何不同。\n上面命令中的 \u0026ldquo;option\u0026rdquo; 就是用户创建时被赋予的权限了，可以是如下内容：\n举个实际的例子，比如我现在有一个新的项目要启动，需要创建对应的用户和数据库：\nCREATE USER new_project_user CREATEDB; ALTER USER new_project_user PASSWORD '12345'; # 修改登录密码  这样一个可创建项目数据库的用户就创建完成了！当然这种情况下，创建的用户其他是没有其他数据库及表的访问权限的。\n2、修改权限\n之前说过的5项权限中，存在包含超级用户、创建数据库权限和 Login 在内的特殊权限，在修改权限或者说管理权限时，使用的命令是与一般权限不同的：\nALTER ROLE username [ [WITH] option [ ... ] ]  而一般的针对数据库中建模式、数据库中建表等的则使用 \u0026ldquo;GRANT\u0026rdquo;、\u0026ldquo;REVOKE\u0026rdquo; 命令：\nGRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ] # 上面这种是书中记载的，可能难以理解，换种形式如下 GRANT some_privileges ON database_object_type object_name TO username   \u0026ldquo;some_privileges\u0026rdquo; 代表一种权限，例如 \u0026ldquo;SELECT\u0026rdquo;、\u0026ldquo;UPDATE\u0026rdquo; \u0026ldquo;database_object_type\u0026rdquo; 代表一种数据库对象类型，例如 \u0026ldquo;TABLE\u0026rdquo;、\u0026ldquo;SEQUENCE\u0026rdquo; \u0026ldquo;object_name\u0026rdquo; 代表表名 \u0026ldquo;username\u0026rdquo; 则就是用户名了  比如说我现在需要将 \u0026ldquo;testdb\u0026rdquo; 模式中的 \u0026ldquo;student\u0026rdquo; 表查看权限赋予刚刚我们创建的 \u0026ldquo;new_project_user\u0026rdquo; 用户：\nGRANT SELECT ON table student TO new_project_user;  这个时候再用 Navicat 连接后去查看 \u0026ldquo;student\u0026quot;表，可以正常访问了。\n具体的权限贴在下放以作记录，如果需要同时赋予多个权限，除了 \u0026ldquo;ALL PRIVILEGES\u0026rdquo; 以外，只需要在多个权限中用 \u0026ldquo;,\u0026rdquo; 隔开就行了。\n 这里是后面学习时候的修修补补：\n 只有创建数据库的权限是特殊权限，而如果要将某个数据库的权限全赋给某个用户，同样使用的是 \u0026ldquo;GRANT\u0026rdquo; 命令，例如：  GRANT ALL PRIVILEGES ON DATABASE testdb TO new_project_user;  \u0026ldquo;REVOKE\u0026rdquo; 是删除权限的命令，忘记举例：  REVOKE CREATE ON SCHEMA public from new_project_user;  ","id":9,"section":"posts","summary":"在学习具体的权限管理之前，需要先了解一下 PostgreSQL 中权限的几个层次： 特殊权限，包含超级用户的权限、创建数据库的权限、创建用户以及 Login 的权限。 在数据库中","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记 (三) 用户权限的管理控制","uri":"https://senjianlu.com/2020/02/postgresql-note-03/","year":"2020"},{"content":"psql 是 PostgreSQL 中的一个命令行工具，类似与 Oracle 中的 sqlplus，但是与之不同的是 psql 支持运行数据库命令或者直接运行 SQL 语句并把结果返回。\n既然是从头开始学习，当然也把这一部分再巩固下为佳。\n 进入 psql 命令行的方法\nsu - postgres psql  当显示 postgres=# 时就说明已经进入 psql 工具下了。\n 基础命令 1、查看所有数据库\n\\l  2、切换数据库\n\\c testdb  3、查看此数据库下的表\n\\d  4、查看表的属性\n\\d [表名]  \\d 的用法很多，不仅可以查看表，也可以查看表的索引或是带上通配符查询\n\\d student_pkey \\d s*  而扩展的 \\d 命令则包含了更多功能\n\\dn # 列出所有schema \\db # 显示所有表空间 \\du # 列出所有的数据库用户 \\dp [表名] # 显示表权限分配情况 ......  更多的指令在输入 \\d 后再补两个 Tab 键即可查询出来，同期 \\t 之类的也类似。\npsql 的学习到这目前就够用了，因为开发中主要还是用 Navicat 来的高效一点，既然刚刚涉及到权限查看了，正好手头上有个多表不同用户的项目，那就下一章先学下权限管理好了。\n","id":10,"section":"posts","summary":"psql 是 PostgreSQL 中的一个命令行工具，类似与 Oracle 中的 sqlplus，但是与之不同的是 psql 支持运行数据库命令或者直接运行 SQL 语句并把结果返回。 既然是从头开始学习","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记 (二) psql 工具的使用","uri":"https://senjianlu.com/2020/02/postgresql-note-02/","year":"2020"},{"content":"由于在学校针对作业和毕设 MySQL 已经很够用了，因此也没有做更多对数据库的功课，只知道 Oracle 数据库适合企业，MySQL 适合小型项目，但是工作以后的第一个项目就接触的是陌生的 PostgreSQL 数据库，才发现原来还有这么好用的开源数据库，正好趁新冠肺炎这个被动假期时间把它好好学一遍。\n 主要书籍是 《PostgreSQL 修炼之道：从小工到专家》\nJD链接：PostgreSQL 修炼之道：从小工到专家\nPDF 下载 (Google Drive)：PostgreSQL 修炼之道从小工到专家.pdf\n无论如何工具书还是入正比较好，个人是因为快递延缓发货，一边等书一边 PDF 先学习起来。况且只在读完两章后就感叹唐成老师这本书写的真的很好，对 PostgreSQl 的特性和基础 SQL语句的解释都很详细，即使是从没这方面基础的也可以收获很多。\n 关于 PostgreSQL 的介绍，书中已经写的很详细了，就不再做过多的赘述。\n吸引我的地方无非几点：\n 免费开源（最重要的原因） 有稳定的更新和问题反馈渠道 占用低，即使是阿里的轻量都能跑 Django+PostgreSQL Navicat for PostgreSQL 价格低，150/3 月，1000 买断，真香  而再看使用上的优点则太多了：\n 支持数据库中创建对象，对多个项目用同数据库的太友好！ 支持列表 list 类型数据的存取 支持 JSON、xml 类型数据的存取 INSERT INTO table VALUES () ON CONFLICT() DO UPDATE/NOTHING 约束时处理（专属神器，太好用了，不知道省了多少时间）  列举几个我没有系统学习之前，用的时候发现的优点，我想在其中总有一个点会戳中后端开发人员的心。\n1、直接开始吧那就！首先当然是 PostgreSQL 的安装。\nPostgreSQL 支持 Linux、Mac OS 和 Windows 下安装，而且方法相当简单，由于我是为了部署项目数据库，因此这里以 CentOS7 为例。\n注：这里安装的是 9.2.24 版本的,如果需要 10+ 版本的可参考这个博文 CentOS7.6 安装 PostgreSQL10\n运行\nyum install postgresql-server.x86_64  当然在安装前可以先运行\npsql --version  查看下云服务等是否自带了低版本 Postgresql 数据库。\n安装之后，记得先初使用化数据库再启动\nservice postgresql initdb service postgresql start service postgresql status  显示 running 就说明数据库已经安装完成了。\n2、登录到数据库。\nPostgreSQL 在安装时默认会添加用户 postgres，运行\nsu - postgres  先切换到 postgres 用户下，再输入\npsql  就进入到 PostgreSQL 数据库中了。\n这里推荐先把 postgres 用户的密码改掉：\nALTER USER postgres WITH PASSWORD \u0026lt;password\u0026gt;;  注意：这里的命令是在数据库中运行的，即 postgres=#: 下。\n3、远程连接，如果你要在 Navicat 等工具中使用这个数据库，还需要做些配置。\n首先是 postgresql.conf 文件的配置\nvi /var/lib/psql/data/postgresql.conf  修改\nlisten_addresses = '*' port = 5432 max_connections = 100  保存退出即可。\n然后再修改 pg_hba.conf 这个文件，路径和刚刚相同\nvi /var/lib/psql/data/pg_hba.conf  在最后添加这条\nhost all all 0.0.0.0/0 md5  当然开放访问的 IP 视自己情况而定，这里因为腾讯云服务器安全组全开而且机器连防火墙都没开我也就自暴自弃了，后面会再专做一个项目部署时端口等的初步设置以保障最基础的安全性。\n都保存以后重启 PostgreSQL 服务，再尝试远程连接吧！\nservice postgresql restart  至此，PostgreSQL 的学习环境就已经安装完成了，如果想升级为开发环境，就像之前强调的一是防火墙要开，端口要适当开放；二是版本最好升级到 10+，以使用最新的特性。\n附上书的目录：\n基础篇涉及到所有支持存储的数据类型，并且所有 PostgreSQL 的基础操作也都做了详解，是肯定要认真学习并做好笔记的。\n提高篇的 PostgreSQL 特有正则表达式很值得学习，索引、序列和锁由于自身之前用的不多，也再过一遍好了。\n而之后的数据库优化和第三方开源软件及架构在这次学习中只会做了解，在项目进行或是完成后再结合实际情况学习可能效果会更好。\n","id":11,"section":"posts","summary":"由于在学校针对作业和毕设 MySQL 已经很够用了，因此也没有做更多对数据库的功课，只知道 Oracle 数据库适合企业，MySQL 适合小型项目，但是工作以后的第一个","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记 (一) 数据库的安装与环境配置","uri":"https://senjianlu.com/2020/02/postgresql-note-01/","year":"2020"},{"content":"突然发现 PVE 下安装的 LEDE 和爱快 不是占用的 CPU 物理核心，所设置的 1 核只是限制了最高占用，于是就决定再利用下多下来的 2G 内存，安装个黑群晖做台式和笔记本之间的文件共享。\n 环境：ProXmoX VE\n需要时间：0.5 小时左右\n原教程：【悟空5kong】PVE 下部署 LEDE+黑群晖 NAS 双系统（J1900 软路由）\n 配置方面\n在已经成型的软路由基础上，新增了两块西数 1T 的紫盘。\n注意：紫盘主要用作监控存盘，只有 5400 转，普通家用上 7200 转的蓝盘组 RAID1 即可。\n所需的软件及下载地址\n所有文件 (Google Drive)：PVE 下 黑群晖安装所需文件\n 黑群晖的安装和配置比较简单，不需要设置网卡之类的，所以直接开始就行了。\n1、首先在 PVE 下新建虚拟机作为黑群晖的容器。\n先将 .iso 光盘镜像文件 (XPEnoboot_DS3615xs_5.2-5967.1..iso) 上传，这个将作为虚拟机的启动引导。\n接着创建虚拟机，并将其编号按顺序设置为 102，注意这个编号要记住，之后挂载硬盘的时候会用到。\n操作系统界面选择刚刚上传的 .iso 文件作为引导。\n硬盘的配置默认即可，如果你的系统硬盘只有 32G 的话可以缩小，反正也不会用来做存储盘。\n如果黑群晖只用来做文件存储而不装大量套件的话，CPU 设置一核心即可。\n亲测即使是传输大量照片等小文件的情况下，200ge 的一核占用也只在 50% 左右。 内存同理，看需求情况，但是2G确实已经很够用了。\n这一步需要注意：桥接的端口千万不要设置在之前进网的 WAN 口上，而设置在其他任意端口都没有问题！\n网卡则选择 E1000 因为部分黑群晖系统不支持半虚拟化的识别。\n确认无误完成即可。\n2、接着开始机械磁盘的挂载。\n视频教程中并没有这一步，但是这一步是需要放在安装黑群晖系统之前的，不然安装完再挂载会出现进不去系统等玄学问题。\n用 Xshell6 连接PVE后台，当然用上一篇的 MobaX 是一样的。\n进去后直接输入\nls -l /dev/disk/by-id/  查看当前系统连接的硬盘情况。\n只需要 ata 开头的即可，我挂载的是西数的机械，因此就是下面那两块了。\n接着复制这两块硬盘的完整信息。\n ata-WDC_WD10EJRX-89N74Y0_WD-WCC4J3FCD95S\nata-WDC_WD10EJRX-89N74Y0_WD-WCC4J4LZF6VT\n 然后在其前面加上 \u0026ldquo;qm set 102 \u0026ndash;sata2 \u0026quot; 运行即可。\n注：102 代表的是你虚拟机的编号；sata2 则是之后会显示在黑群晖盘符，自己设置即可\n之后再回虚拟机的硬件页面，就可以看见新增的这两块硬盘了。\n3、然后开始安装黑群晖系统。\n首先更改启动顺序，将 CD 设置为第一启动项，即我们刚刚上传的 .iso 接着点击启动虚拟机，启动完成后注意下后台地址。\n浏览器地址栏输入，进入后台页面。\n这里选择手动安装，并上传 .pat 文件，文件我也提供了下载。\n弹出的会清空硬盘直接同意即可，这里注意二次确认清空盘的个数是否和你挂载的盘加上一个系统盘的总个数相同。\n等待其安装完成自动重启即可。\n之后的配置就比较简单了，用户名密码自己设置即可，由于是黑群晖，联网内容全部跳过。\n至此，黑群晖的安装配置就完成了。\n4、最后就是组 RAID，这个比较简单。\n点击左上角的菜单，再选择存储空间管理员。\n选择存储空间\n选择自定义\n选择组成群组 选择你需要组 RAID 的两块硬盘，我这里因为组完了也上传了文件，就用的论坛的图。\n跳出的删除数据提醒，直接确认即可。\n我们这里选你需要的 RAID 模式，推荐 RAID1\n直接应用即可\n然后你就可以看见新建的正常的存储空间了。\n5、为其配置局域网的共享文件夹。\n填入文件夹名族，确认即可。\n选择 此电脑 右键，选择 映射网络驱动器\n填入你的期望盘符和网络文件夹路径即可。\n注：路径的格式由 IP+文件夹名组成\n黑群晖的安装真的比软路由简单太多了，只需要拿钱堆硬盘就可以了。\n顺便说一句，在组 RAID 方面，群晖提供了很方便的操作，勤整理，RAID0 和 RAID1 分开是一个很好的习惯。\n附上对 RAID5 等安全性怀疑的讨论：RAID5 磁盘阵列真的不安全么？\n没有什么存储方案是一劳永逸的。\n","id":12,"section":"posts","summary":"突然发现 PVE 下安装的 LEDE 和爱快 不是占用的 CPU 物理核心，所设置的 1 核只是限制了最高占用，于是就决定再利用下多下来的 2G 内存，安装个黑群晖做台式和笔记本","tags":["硬件"],"title":"PVE 下黑群晖的安装和硬盘直通组 RAID1","uri":"https://senjianlu.com/2020/01/pve-synology/","year":"2020"},{"content":"起因仅仅是不满足现在的科学上网速度，于是就花了点时间研究了下软路由，当然性能够的路由器是可以直接安装 LEDE 的，但是手头正好闲下来一块亮机的 200ge，索性就再组台小机器来当软路由吧。\n不过我不推荐 200ge 作为软路由的cpu，不仅功耗大，而且只有2个核心，LEDE 和爱快各占用一个以后就不能再安装群晖或是其他虚拟机，容易造成性能浪费的情况。\n 环境：ProXmoX VE\n需要时间：3小时左右\n原教程：【悟空5kong】PVE下部署 LEDE+黑群晖 NAS 双系统（J1900 软路由）\n上集- PVE (Proxmox VE) 安装双软路由 爱快+LEDE 保姆级教程\n下集- PVE (Proxmox VE) 安装双软路由 爱快+LEDE 保姆级教程\n 配置单和价格\n 所需的软件及下载地址\n所有文件 (Google Drive)：PVE 下 LEDE+爱快 双软路由部署 所需文件\n 从这里正式开始操作系统的安装和配置过程。\n注意：除了软路由本机，你还需要一台自己的电脑包括显示器鼠标和键盘。同时如果你是拨号上网，你还需要知道自己的运营商账号密码！\n注：操作系统及软路由的安装都较为简单，繁琐的主要是配置的过程，涉及到网卡上网口的切换以及同步 DNS 和网关的修改，推荐在看博文之前首先过一遍视频教程，PVE 和 LEDE 的安装参照悟空，而爱快和 LEDE 的网口映射参照 Video Talk。\n1、首先安装 PVE 系统，安装过程类似于 Windows 操作系统：下载 .iso 文件拷贝进 U 盘，然后开机过程中按 Del 键进入 BIOS，选择 U 盘启动来进行安装。\n Management Interface（网卡）：选默认的第一个，之后也做PVE的管理网口 Hostname（域名）：可以瞎填 IP Address：10.10.10.254 以后通过这个IP访问PVE系统，需要和网关同一网段 Netmask（子网掩码）：255.255.255.0 即可，基本默认都是这个 Getway（网关）：10.10.10.253 爱快的后台地址 DNS Server：10.10.10.253 和网关设置一样的即可\n如果不想麻烦推荐和图片一样设置，后续配置可以照抄。  重启过程中拔下u盘，重启后出现以下界面即说明PVE操作系统已经安装完成。\n2、在 PVE 系统安装完成后，需要将电脑连接到软路由进行接下来的操作，网线的连接比较简单：一头连接正在使用的电脑，另一头连接刚刚配置的 PVE 连接网口，一般情况下是主板的网口，如果配置的是网卡上的网口，那么离 PCIe 连接口最远的一般就是一号网口。\n物理连接完成后，还需要配置本机的 IP 和网关等才能进入 PVE 后台。\n IP 地址：保证和 PVE 虚拟机的 IP 在同一网段 子网掩码：默认的 255.255.255.0 默认网关：和 PVE 的相同 DNS：不配置自动获取即可  打开浏览器，输入 PVE 安装完成后显示的地址，注意是 https://10.10.10.254:8006/ 前缀和端口号不要忘记。\n注：可能有安全提示，直接跳过即可。\n 用户名：root 密码：PVE 安装时设置的密码 语言：默认英文，选择为中文  进入系统的网口选项下，可以看见有一个桥接网口已经建立，端口从属显示与 enp1so 对应，就是第一个网口，意味着第一个网口就被占用了。\n接下来打开所有物理网口的自动启动。\n为其他所有的空余网口建立虚拟网口为桥接做准备。\n建立的过程很简单，记住上面物理网口的名称，创建一个虚拟网口，只需要再桥接端口填入物理网卡名称即可。\n所有的网口都同样操作即可。一一对应检查完后网口就配置完成了。\n3、接下来开始创建虚拟机，原理和 Windows 上使用 VMware Workstation Player 等创建虚拟机一样。\n首先来创建 LEDE 对应的虚拟机，这一部分参考悟空的视频教程更加简单。\n点击创建虚拟机按钮。\n第一步没有需要特殊配置的。\n选择不使用任何介质，这里的安装方法是 SSH 连接至 PVE 后直接命令行安装，然后将这个虚拟机挂载在安装完成的文件夹上，更加快捷。\n硬盘不需要任何操作，反正等下不用这个盘。\nCPU 核心一核就够了。\n内存推荐 2G。\n桥接网口选择管理口即可，模型推荐 E1000，Video Talk 之后爱快等都会用E100进行配置。\n检查无误点击完成即可。\n接着进行添加网卡的操作，为所有虚拟网口在这台虚拟机中配置桥接。\n接着在本机上下载安装 MobaXterm，准备连接 PVE 系统。\n打开新建一个连接，截图是编辑但也啥差别。\n输入密码，点击 Yes 连接成功。\n拖拽虚拟机安装文件和转换工具进软路由系统中。\n接下来\nls  确保文件转移成功，接着为 img2kvm 添加可执行权限，并开始执行 .img 文件的转换\nchmod +x img2kvm ./img2kvm lede.img 101 vm-101-disk-1  101 是虚拟机的序号\n接下来回到浏览器的PVE后台界面，可以看到多出来一个未使用的磁盘，这就是刚刚转换完的，无视后缀是 disk-1 还是 disk-2 ，双击，选择添加即可。\n接着选择 \u0026ldquo;选项\u0026rdquo;，\u0026ldquo;引导顺序\u0026rdquo; 更改为刚刚挂载上的新硬盘即可。\n注意：接下来直接重启软路由，断电重启也可以！\n然后回来点击虚拟机，可能 LEDE 显示会没有反应，点击随意按一个键就可以了。\n至此，最有可能出错的 LEDE 安装完成，配置的事等到爱快配置完后进行。\n如果你是光纤，不需要拨号，那可以跳过接下来的爱快的安装与配置。\n4、接下来开始安装爱快软路由。\n一样新建虚拟机，此界面的名称可以自由更改，其他保持默认即可。\n存储不用改，.iso 介质选刚刚上传的 iKuai 就可以了，类型 Linux 版本也不用变。\n硬盘 2G 就够了，配置如图。\nCPU 配置也是一核就够了。\n内存的设置要注意，新版本爱快最低 4G 内存，如果你的内存不够，需要选择较低版本。 网络的配置和 LEDE 一样，管理口对应的虚拟网口和 E1000。\n核对后直接完成即可。\n创建完成后，去虚拟机的硬件管理界面，当前只有一个默认网口，也是当时配置的PVE的管理网口，同时它也是只是一个 LAN 口，LAN 口通俗来讲就是出网的口，而 WAN 口是进网的口，爱快的作用是拨号，因此我们需要新建一个 WAN 口：选择添加网络设备。\n选择最后一个端口，物理上就是离 PCIe 连接口最近的网口。\n接着启动虚拟机即可。\n爱快的安装还没有结束，进入虚拟机页面，还需要选择安装，如图输入，等待安装完成后的自动重启。如果重启后没有画面或是端口显示断开，按下回车刷新就行了。\n进入系统后，设置 LAN 口 IP：10.10.10.253\n接着在浏览器地址栏输入 10.10.10.253 便可进去 iKuai 的后台了，账号密码均为 admin\n登录后会提示修改管理员密码，改不改都无所谓\n登录进去以后可以看到我们预先配置的两个网口，LAN 口是绿色的说明正在被正常使用，这个口就是我们设置的 PVE 管理口兼 LAN 口，而 WAN 口还是灰色的，需要我们点进去绑定以下刚刚新建的网卡。\n注意：此时将家庭数据中心拉出来的网线接到设置的 WAN 口对应的物理网口上！准备进行拨号上网！\n填入运营商账号密码，然后拨号。\n这边显示已连接说明爱快已经拨号上网成功了。\n接下来配置 DHCP 服务端，选择 DHCP 设置 DHCP 服务端，进行填写。\n注：DHCP 协议的功能为集中的管理、分配 IP 地址。\n 客户端地址：覆盖网段内的所有 IP 即可。 子网掩码：默认的 255.255.255.0 网关：10.10.10.252 就是 LEDE 的后台地址 DNS：如果以科学上网为主选 8.8.8.8 不然就用网络所属运营商的  保存后刷新页面，确认服务正常，爱快软路由的配置就全部完成了。 总之，爱快主要负责拨号上网和提供 DHCP 服务，在配置完成之后，可以先验证下本机是否有网络在进行下一步操作。\n5、配置 LEDE 软路由。首先回到 LEDE 的系统界面，输入以下命令去更改 LEDE 的 IP 地址。\nvi /etc/config/network  方向键控制光标找到这一行，按以下 \u0026ldquo;i\u0026rdquo; 键进入编辑模式，更改成 10.10.10.252 就是你想要的 LEDE 的后台 IP 地址。\n编辑完成后，按下 \u0026ldquo;Esc\u0026rdquo; 键，左下角有冒号出来后，输入 \u0026ldquo;wq\u0026rdquo; 保存并退出。 之后输入\nreboot  重启 LEDE 软路由。 接着就可以在本机的浏览器上输入 10.10.10.252 进入 LEDE 软路由的后台了，默认密码是 koolshare\n进入后台后首先来配置网口。\n选择 LAN 口这一行，点击 编辑。\n首先在物理设置部分将所有的网口都勾选上，因为有爱快的情况下 LEDE 不需要 WAN 口。\n然后回到基本设置，如图设置。\n IP：LEDE 后台地址 10.10.10.252 网关：爱快的后台地址 10.10.10.253 DNS 服务器：和刚刚一样填写即可  接着下滑，到 DHCP 服务器部分，因为 LEDE 是作为爱快下的二级路由存在的，我希望所有的 DHCP 服务都由 LEDE 来提供而不是不具有科学上网功能的爱快来提供，因此要去掉 忽略此接口 的勾选。然后还要去高级设置中，再把 强制 的勾勾上。\n接着保存即可。\n由于 LEDE 用不到 WAN 口，所以将 WAN 口和 WAN6 的接口绑定到空的接口上就可以了。\n至此 LEDE 的安装和配置就全部完成了，修改以下本机的网络设置，将 IP 和 DNS 都勾选至自动获取，看看能不能上网吧！\n6、确保可以上网后，我们回到 LEDE 的后台，准备进行科学上网等的配置操作。\n点击左侧菜单中的 酷软中心，进入的时候如果提示更新，千万不要去更新，新版本会有大量的软件无法使用。 一般情况下，即使你不更新进入酷软中心，也无法再在商城找到科学上网的工具，在 19 年 6 月份的更新中，酷软就将这几个插件删去了。你可以选择去下载网友提供的包离线安装，但很大几率上是不兼容新版本系统的，这里推荐使用酷软的系统备份还原，直接将系统回复至有插件的版本。\n选择 系统 备份/升级\n选择我上面提供的老版本，再点击上传备份。上传之后系统会自动重启。\n等待重启完成后，再进入酷软中心就可以看到消失的科学上网插件了！\n节点的配置就不再阐述了，SSR 和 SS 订阅的稳定性在我实际用下来后觉得并不好，不如只在电脑端开启相应代理，而 V2Ray 则比较稳定，基本全天 24 小时节点都不会出现断连情况。\n 推荐2家供应商：\n忍者云 有线路提供 V2Ray 代理，稳定\n奇幻之旅 便宜实在\n 至此，PVE 下 LEDE+爱快 双软路由的部署就全部完成了，好好享受世界吧！\n","id":13,"section":"posts","summary":"起因仅仅是不满足现在的科学上网速度，于是就花了点时间研究了下软路由，当然性能够的路由器是可以直接安装 LEDE 的，但是手头正好闲下来一块亮机的 200","tags":["硬件"],"title":"PVE 下 LEDE+爱快 双软路由部署","uri":"https://senjianlu.com/2020/01/pve-lede-ikuai/","year":"2020"},{"content":"虽然也有免费的可以用，但是既然软路由已经配置了方便的上网环境，GitHub 访问起来比以前便利了许多，那就把图床直接部署在 GitHub 上好了，虽然隐私性是一缺点，但是主要也是给博客使用，也就无所谓了。\n 环境：Windows 10 64 位\n需要时间：0.5 小时左右\n原教程：CSDN PicGo+GitHub 搭建个人图床工具\n 1、在 GitHub 上新建仓库，并在 settings 中设置为 Public\n2、创建 token，为了给 PicGo 客户端配置，使其能上传给对应 GitHub 仓库。\n描述可以随便填写，但是 repo 对应的需要全部勾选。\n注意：token 只出现一次！所以一定要保存！\n3、下载\u0026amp;安装 PicGo。\n PicGo （目前 2.2.1）是一个开源的图床工具，非常优秀。\n Git 地址：https://github.com/Molunerfinn/PicGo\nWindows 版下载地址：https://github.com/Molunerfinn/PicGo/releases\n4、配置 PicGo\n 仓库名：账号名+仓库名 分支名：master Token：刚刚保存的 token 存储路径：img/ 自定义域名：https://raw.githubusercontent.com/账号名/仓库名/master  配置点击设为默认图床，然后确定即可。\n至此，Windows 下 PicGo+GitHub 的个人图床工具搭建完成，通过微信或者 QQ 截图完成，默认剪贴板中是图片的情况下，直接 Ctrl+Shift+P 即可将图片上床图床，而 .md 格式的图片链接也会替换至剪贴板，直接粘贴在所需地方即可。\n","id":14,"section":"posts","summary":"虽然也有免费的可以用，但是既然软路由已经配置了方便的上网环境，GitHub 访问起来比以前便利了许多，那就把图床直接部署在 GitHub 上好了，虽然隐私性","tags":[],"title":"Windows 下 PicGo+GitHub 搭建个人图床工具","uri":"https://senjianlu.com/2020/01/picgo-github/","year":"2020"},{"content":"确确实实感觉记性越来越差，有记录包括“问题解决方法”、“配置文件修改”等信息的需求了，但同时也希望一切从简，听从V友建议选用 Hugo+GitHub Pages 免费搭建个静态博客来做树洞吧。\n 环境：Windows 10 64 位\n需要时间：1 小时左右\n原教程：CSDN Windows 下搭建 Hugo 博客\n 1：在 https://github.com/gohugoio/hugo/releases 地址下找到Windows压缩文件下载，如下图 64 位的。\n2：新建 Hugo 和 Hugo/bin 文件夹，将下载下来的 .exe 文件放入 bin 文件夹，并添加至环境变量中。\n3：在 Cmd 中输入\nhugo version  检测是否安装成功，安装成功后进入 Hugo 文件夹中，输入\nhugo new site myblog  myblog 替换成想要的博客文件夹名字。\n4：进入新建的博客文件夹下，可以看见项目结构：content 文件夹存放内容，themes 文件夹用来存放主题，config.toml 用来配置文件，这也是这次初步建立需要博客需要改的内容。\n5：建完文件夹后先去挑选主题，在 https://themes.gohugo.io/ 选择自己喜欢的主题进行下载，这次我使用 hugo-theme-m10c 这款主题，因为选择它避免配置 config.toml 文件而花费大量时间。\n6：Cmd 进入博客文件夹下，执行以下命令把 GitHub 上的主题文件 Clone 到对应文件夹下 themes/m10c\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  7：此时就已经在本地运行博客做确认了，执行\nhugo server -t m10c --buildDrafts  启动项目，然后前往 http://localhost:1313/ 就可以看到了。\n8：接下来开始新建一篇博客，使用 Hugo 很大程度上就是看中了它将 .md 文件渲染成静态博客页面的能力，即使是发布完成后，原稿也可以保存方便脱机查看。\n首选 Ctrl+C 结束本地的预览，然后新建博文对应的 .md 文件。\nhugo new post/blog.md  新建的 .md 文件会存储在 content/post 中，直接前往进行编辑即可。\n9：推荐使用 VS Code 进行编辑，左上角的预览按钮，点击后可以将窗口分为左右两部分用于查看实施效果。 注意：draft: true 需要改为 draft: false 图中并未做修改，如果不修改就是草稿，不会在博文页面上显示内容！\n写完后直接 Ctrl+S 保存即可。\n10：再次本地启动项目，可以看见已经有对应的博文了。至此，本地博客环境就算配置完成了。\nhugo server -t m10c --buildDrafts  11：GitHub 为每个账号提供了一个免费的空间来存储静态的 HTML、JS 和 CSS，而我们就可以借此来发布博客。 首先去新建仓库，注意命名，这是 GitHub 辨别是否为网络空间的依据。\n仓库名需满足 账户名.github.io 的命名规范，然后点击绿色的 create 按钮进行创建。\n我因为已经部署完成，因此这里显示重复创建。\n12：创建完成后，回到 myblog 博客目录，执行以下命令来生成 public 目录，也就是 GitHub 仓库所需的静态博客的文件。（后续都用的原博客的图，路径可能有偏差，都是基础的 Git 操作）\nhugo --theme=m10c --baseUrl=\u0026quot;地址\u0026quot; --buildDrafts  13：进入 public 文件夹，将所有文件添加、提交到本地。\ngit init git add. git commit -m \u0026quot;附言\u0026quot;  14：将本地 public 与 GitHub 进行关联后，进行推送，第一次推送会需要输入 GitHub 的账号密码。\ngit add origin http://github.com/m1801823/m1801823.github.io.git git push -u origin master  15：等待推送完成后，刷新 GitHub 页面，对应的文件就上传上来了，这时候输入 http://账户名.github.io 就可以访问了\n16：如果自己有域名的话，也可以配置 DNS 直接让域名解析到你的静态博客上，方便告诉好友你的博客网址。\n这里以在 Namecheap 上购买的域名为例，不推荐阿里云和腾讯云，只因为管局备案太麻烦。\n首先选择已有域名进入管理面板。\n然后新增或者修改 DNS 解析记录，对应以下修改即可，只需要把 CNAME Record 的 Value 修改成你的地址即可。\n最后回到 GitHub 的仓库部分，选择 Settings，拉到 Custom domain 部分修改成你的域名保存。\n大概 5 分钟左右，域名就会解析到你的博客，在开始的几天是不支持 HTTPS 的，只能先用 http://你的域名 进行访问。\n之后如果 HTTPS 加密可用，则需要更改一下模板，在 head 部分加上\n\u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;upgrade-insecure-requests\u0026quot;\u0026gt;  来自动将 HTTP 的不安全请求升级为 HTTPS，否则可能出现 CSS 等加载不出来的情况。\n至此基于 Hugo 和 Github Pages 的静态博客搭建完成，开始养成记录的好习惯吧！\n","id":15,"section":"posts","summary":"确确实实感觉记性越来越差，有记录包括“问题解决方法”、“配置文件修改”等信息的需求了，但同时也希望一切从简，听从V友建议选用 Hugo+GitHub Pages 免费搭建个静","tags":[],"title":"Windows 下 Hugo+GitHub Pages 搭建静态博客","uri":"https://senjianlu.com/2020/01/hugo-github-pages/","year":"2020"},{"content":"服务器的部署笔记。\n 各部分功能介绍：\n Nginx 是一个高性能的 HTTP 和反向代理 Web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。 uWSGI 负责多线程，即支持多人同时访问网站。 Django 是由 Python 编写的开源 Web 应用框架，适合个人小项目搭建。   服务器系统为 CentOS7，当然记录的所有命令再更高版本上也都可以使用。\n1、既然搭建的是 Python 项目，首先升级以下服务器端的 Python 版本，默认 Linux 自带 Python2，我们把它先升级为 Python3。\n安装依赖软件\nyum -y install sqlite-devel yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel  下载安装 Python3.6\nwget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz tar zxvf Python-3.6.1.tgz cd Python-3.6.1 ./configure --prefix=/usr/local/python3 make \u0026amp;\u0026amp; make install  创建 Python 及 pip 命令软链接\nln -s /usr/local/python3/bin/python3 /usr/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3  这样 Python3 就已经安装完成了，键入 Python3 再回车就可以进入 Python 编译了。\n注：Ctrl+Z 退出 Python 编译\n2、接下来安装 Django 并配置项目，这里选择的版本是 2.1.8，单纯的因为够用且稳定，新版本的环境配置没有前人指导。\npip3 install django==2.1.8  等待安装完成后，上传 Django 项目到服务器上任意目录，使用 Xftp 或者 git clone 都可以\ncd 项目文件夹 python3 manage.py runserver 0.0.0.0:80  注意，运行项目时可能报错：\n You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run \u0026lsquo;python manage.py migrate\u0026rsquo; to apply them.\n 这时只需要按照提示，输入以下内容即可\npython3 manage.py migrate  出现以下信息则说明启动成功。\n注意： 如果访问页面出现了以下错误，那么进入你的项目，修改 settings.py 将 ALLOWED——HOSTS = [] 修改为 ['*'] 即可解决。\n DisallowedHost at / Invalid HTTP_HOST header: \u0026lsquo;47.56.227.27\u0026rsquo;. You may need to add \u0026lsquo;47.56.227.27\u0026rsquo; to ALLOWED_HOSTS.\n 至此，Python 环境与 Django 环境就安装完成。\n3、接下来安装 uWSGI Web 网关。\n首先下载安装 uWSGI\nwget http://projects.unbit.it/downloads/uwsgi-2.0.1.tar.gz tar zxvf uwsgi-2.0.1.tar.gz cd uwsgi-2.0.1 python3 uwsgiconfig.py --build cp -R /home/uwsgi-2.0.1 /usr/local/uwsgi ln -s /usr/local/uwsgi/uwsgi /usr/bin/uwsgi  然后测试 uWSGI 是否安装成功，创建测试文件\nvi test.py  文件内容为：\ndef application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) return [b\u0026quot;Hello World\u0026quot;]  输入完成后 :wq 保存，然后执行以下命令进行测试。\n/usr/local/uwsgi/uwsgi --http :9090 --wsgi-file /home/test.py   防火墙开放端口指令：\nfirewall-cmd \u0026ndash;list-all | 查看当前开放的所有端口\nfirewall-cmd \u0026ndash;add-port=80/tcp \u0026ndash;permanent | 80替换为你需要开放的端口\nfirewall-cmd \u0026ndash;reload\n然后去对应服务商的安全组处开放安全组。这里就以阿里云国际为例。  前往你的 IP:9090 出现 Hello World 就说明 uWSGI 的安装已经完成了！\n4、开始 uWSGI 和 Django 结合，执行\nuwsgi --http :9090 --chdir /home/Django 项目文件夹 --wsgi-file Django 项目(与 manage.py 同级)/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9192  同样访问 IP:9090 ，如果可以访问 Django 页面则说明成功。\n注：如果在访问 Django 项目时静态文件加载失败可以先忽略，在 Nginx 配置中会指定静态文件路径，配置后可以正常访问。\n5、安装 Nginx\n首先下载安装依赖第三方软件 PCRE\nwget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.34/pcre-8.34.tar.bz2 tar jxvf pcre-8.34.tar.bz2   如果报错：bzip2: Cannot exec: No such file or directory\n执行：yum -y install bzip2\n cd pcre-8.34 ./configure --enable-utf8 make \u0026amp;\u0026amp; make install  下载安装依赖第三方软件 OpenSSL\nwget http://distfiles.macports.org/openssl/openssl-1.0.2h.tar.gz tar zxvf openssl-1.0.2h.tar.gz  下载安装 Nginx\nwget http://nginx.org/download/nginx-1.9.9.tar.gz tar zxvf nginx-1.9.9.tar.gz ./configure --prefix=/usr/local/nginx --with-pcre --with-http_stub_status_module --with-http_ssl_module --with-openssl=/home/openssl-1.0.2h --with-http_gzip_static_module --with-http_sub_module --with-cc=/usr/bin/gcc make install  新建 www 用户\nuseradd -s /sbin/nologin -M www  备份、修改 Nginx 配置文件\ncd /usr/local/nginx/conf cp -f nginx.conf nginx.conf_bak vi nginx.conf (修改文件) user www; # 修改启动用户为 www worker_processes 4; # 启动4个进程，根据实际需求配置  启动 Nginx\ncd /usr/local/nginx/sbin ./nginx   如果报错：nginx: [emerg] still could not bind()\n说明80端口目前被占用\n执行：netstat -apn | grep 80\n然后：kill -9 26105\n26105为搜索出来的 0.0.0.0/80 对应的PID\n注意：需要删除5-6次，因为执行的适合有进程保护\n 再访问 IP:80 显示 Nginx 页面说明 Nginx 安装成功。\n6、Nginx+uWSGI+Django 三者连携。\n首先在 Django 项目文件夹中创建 uwsgi.ini\nvi uwsgi.ini (文件内容) [uwsgi] # uwsgi启动端口 socket = 127.0.0.1:9090 # django项目目录 chdir=/home/SteamCash module=SteamCash.wsgi master = true processes=2 threads=2 max-requests=2000 chmod-socket=664 vacuum=true # 日志路径 daemonize = /home/SteamCash/logs/uwsgi.log  配置 Nginx\nvi /usr/local/nginx/conf/nginx.conf (文件内容) ...... server { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; # 选择为你项目的static文件夹 location /static { alias /home/SteamCash/static; } location / { include uwsgi_params; uwsgi_pass 127.0.0.1:9090; root html; index index.html index.htm; } ......  启动 uWSGI\nuwsgi --ini /home/SteamCash/uwsgi.ini  启动 Nginx\n./usr/local/nginx/sbin/nginx  接着访问页面即可。\n","id":16,"section":"posts","summary":"服务器的部署笔记。 各部分功能介绍： Nginx 是一个高性能的 HTTP 和反向代理 Web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。 uWSGI 负责多线程，即支持多人同时访问网站。 Django 是由 Python 编","tags":["Python"],"title":"CentOS7 下 Nginx+uWSGI 配置 Django 项目","uri":"https://senjianlu.com/2020/01/centos7-nginx-uwsgi-django/","year":"2020"},{"content":"如果你急于解决爬虫 HTTP 代理池访问 HTPPS 出错，并且自己有境外服务器的话，我直接给出解决方案：服务器搭建 SOCKS5 代理并在代码中以 socks5h://账号:密码@IP:端口 的格式使用\n以 Python3 为例：\nproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5h://username123:passwd456@128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5h://username123:passwd456@128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r 注意： 代理的协议选择要使用 SOCKS5H，下面我会放使用 HTTP 和 SOCKS5 产生的错误供参考。\n1、使用 HTTP 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  requests.exceptions.ProxyError: HTTPSConnectionPool(host=\u0026lsquo;steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by ProxyError(\u0026lsquo;Cannot connect to proxy.\u0026rsquo;, ConnectionResetError(10054, \u0026lsquo;远程主机强迫关闭了一个现有的连接。\u0026rsquo;, None, 10054, None)))\n 2、使用 HTTPS 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;https://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  requests.exceptions.ProxyError: HTTPSConnectionPool(host=\u0026lsquo;steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by ProxyError(\u0026lsquo;Cannot connect to proxy.\u0026rsquo;, ConnectionResetError(10054, \u0026lsquo;远程主机强迫关闭了一个现有的连接。\u0026rsquo;, None, 10054, None)))\n 3、使用 SOCKS5 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  socks.GeneralProxyError: Socket error: 0x05: Connection refused\nrequests.exceptions.ConnectionError: SOCKSHTTPSConnectionPool(host=\u0026lsquo;steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by NewConnectionError('\u0026lt;urllib3.contrib.socks.SOCKSHTTPSConnection object at 0x03C29450\u0026gt;: Failed to establish a new connection: 0x05: Connection refused'))\n 4、最后使用 SOCKS5 代理，但是协议处变为 SOCKS5H：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Cahhse\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5h://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5h://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  proxy 200 b'{\u0026ldquo;success\u0026rdquo;:true,\u0026ldquo;lowest_price\u0026rdquo;:\u0026quot;$0.18\u0026quot;,\u0026ldquo;volume\u0026rdquo;:\u0026ldquo;210,212\u0026rdquo;,\u0026ldquo;median_price\u0026rdquo;:\u0026quot;$0.18\u0026quot;}'\n 返回了我需要的数据，成功。\n 在处理这个问题的时候，感觉把学的网络全还给了老师。\nHTTP 属于应用层，而 SOCKS5 属于会话层，这就意味着 SOCKS5 所能代理的范围会比 HTTP 协议更广。\n而 SOCKS5H 与 SOCKS5 的区别则是：SOCKS5 在本地解析 Hostname，而 SOCKS5H 则有 SOCKS5 代理所部署的服务器解析 Hostname。\n换句话说，SOCKS5 适合本地能够解析目标主机域名（比如 GitHub）但是访问速度慢的域名来提高下载速度，而 SOCKS5H 则可以用来代理本地不能解析的网站（比如 Google），由服务器解析目标主机域名。\n最后附上服务端代理的搭建教程：\nHttp代理：CentOS7 搭建 TinyProxy 代理\nSocks5代理：GitHub SOCKS5 一键脚本\nbbr加速：CentOS/Debian/Ubuntu 系统 TCP-BBR 一键安装脚本 （如果需要请在安装代理之前执行）\n","id":17,"section":"posts","summary":"如果你急于解决爬虫 HTTP 代理池访问 HTPPS 出错，并且自己有境外服务器的话，我直接给出解决方案：服务器搭建 SOCKS5 代理并在代码中以 socks5h://账号:密","tags":["Python"],"title":"Centos7 下配置 HTTP 和 SOCKS5 代理服务端 用以代理 HTPPS 解决爬虫 SSL 错误","uri":"https://senjianlu.com/2020/01/centos7-http-and-socks5-proxy/","year":"2020"}],"tags":[{"title":"Java","uri":"https://senjianlu.com/tags/java/"},{"title":"PostgreSQL","uri":"https://senjianlu.com/tags/postgresql/"},{"title":"Python","uri":"https://senjianlu.com/tags/python/"},{"title":"RabbitMQ","uri":"https://senjianlu.com/tags/rabbitmq/"},{"title":"日语","uri":"https://senjianlu.com/tags/%E6%97%A5%E8%AF%AD/"},{"title":"硬件","uri":"https://senjianlu.com/tags/%E7%A1%AC%E4%BB%B6/"},{"title":"网站建设","uri":"https://senjianlu.com/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}]}