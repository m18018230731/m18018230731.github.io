{"categories":[{"title":"学习笔记","uri":"https://senjianlu.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"教程翻新","uri":"https://senjianlu.com/categories/%E6%95%99%E7%A8%8B%E7%BF%BB%E6%96%B0/"},{"title":"踩坑记录","uri":"https://senjianlu.com/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"}],"posts":[{"content":"为了在东京奥运会期间应对临时封路，紧跟日本人赶了2个月的功能，终于能休息一阵了 :)\n虽然是因为奥运会推迟而不是因为开发完成\n总之又能学点新东西了，方便记录先准备个一键推送博客的工具吧。\n 环境：Windows 10 64位\n需要时间：10分钟左右\n原教程：CSDN Hugo博客的脚本快速发布博客\n 说着好听的一键脚本其实也就是把发布所需要输入的几行命令写进一个批处理文件里罢了，首先回顾下一般情况下我们完成一篇博客并发布的所有命令：\nhugo new posts/myblog01.md # 新建一片博文，当然也能去路径下之间创建.md文件\rhugo server -t pure --buildDrafts # 在localhost起博客看效果 pure换为你的theme名\rhugo --theme=pure --baseUrl=\u0026quot;https://moyu.best\u0026quot; --buildDrafts # 确保效果符合预期后生成public目录 Url换为你的博客地址\rcd public\rgit add .\rgit commit -m \u0026quot;推送\u0026quot;\rgit push -u origin master\rgit push -f # 如果报错了但是你能确定本地的是最新状态的话\r 然后开始写脚本，一般在win下直接写bat脚本就行了，但是这里我们为了后期通过git bash来执行，省去每次输入git账户密码的步骤，所以采用shell脚本。\n直接上代码和注释：\n#!/bin/bash\recho -e \u0026quot;\\033[0;32mStart to deploy!\\033[0m\u0026quot;\r# Build the hugo project\rhugo --theme=pure --baseUrl=\u0026quot;https://moyu.best\u0026quot; --buildDrafts\r# Go to Public\rcd public\r# Add all\rgit add .\r# Commit\rgit commit -m \u0026quot;Commit by deploy.sh\u0026quot;\r# Push\rgit push -u origin master\r# Back\rcd ...\r 然后是选择用Git Bash的方式执行这个批处理脚本。\n选定Git Bash即可，然后运行！\n可以看见效果和我们手动push是一样的，推送成功了。\n结束~后续是可以添加msg作为参数传入和catch冲突后强制push的，这里就不琢磨了，等个下周用上2天好好学习一下批处理脚本吧。\n脚本下载地址：下载（记得更改theme主题和博客url）\n","id":0,"section":"posts","summary":"为了在东京奥运会期间应对临时封路，紧跟日本人赶了2个月的功能，终于能休息一阵了 :) 虽然是因为奥运会推迟而不是因为开发完成 总之又能学点新东西了，","tags":[],"title":"Windows下 Hugo静态博客一键推送发布","uri":"https://senjianlu.com/2020/05/hugoauto/","year":"2020"},{"content":"在学习具体的权限管理之前，需要先了解一下 PostgreSQL中权限的几个层次：\n 特殊权限，包含超级用户的权限、创建数据库的权限、创建用户以及 Login的权限。 在数据库中创建模式 (SCHEMA) 的权限。 在模式中创建数据库对象的权限，如创建表、索引等。 查询单表，和插入、更新或删除表中数据的权限。 最低的则是只能操作表中部分字段的权限。  五种权限中，比较难理解的可能就是为什么要把创建数据库等设置为特殊权限。在这之前，我们需要先学习 PostgreSQL中是如果对权限进行管理的。\n PostgreSQL使用角色的概念管理数据库权限，为了方便管理，往往给一个角色赋予一系列的权限，而如果某个用户需要这些权限，则只需要直接把角色赋给用户即可。\n稍微有点绕的是在这里，PostgreSQL中角色和用户又是没有区别的，一个用户就是一个角色，因此可以把一个用户的权限赋给另一个用户，稍稍有点难理解，但是实际操作中不会有什么阻碍。\n1、那就从创建用户开始吧。\n指令如下：\n创建角色：CREATE ROLE username [ [ WITH ] option [...] ] 创建用户：CREATE USER username [ [ WITH ] option [...] ]  在这里我一般情况下使用 CREATE USER，因为这样默认出来的用户是有 \u0026ldquo;Login\u0026rdquo; 权限的，不需要再去额外设置一下了。用户的其他属性用两种方法创建出来不会有任何不同。\n上面命令中的 \u0026ldquo;option\u0026rdquo; 就是用户创建时被赋予的权限了，可以是如下内容：\n举个实际的例子，比如我现在有一个新的项目要启动，需要创建对应的用户和数据库：\nCREATE USER new_project_user CREATEDB; ALTER USER new_project_user PASSWORD '12345'; # 修改登录密码  这样一个可创建项目数据库的用户就创建完成了！当然这种情况下，创建的用户其他是没有其他数据库及表的访问权限的。\n2、修改权限\n之前说过的5项权限中，存在包含超级用户、创建数据库权限和 Login在内的特殊权限，在修改权限或者说管理权限时，使用的命令是与一般权限不同的：\nALTER ROLE username [ [WITH] option [ ... ] ]  而一般的针对数据库中建模式、数据库中建表等的则使用 \u0026ldquo;GRANT\u0026rdquo;、\u0026ldquo;REVOKE\u0026rdquo; 命令：\nGRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ] # 上面这种是书中记载的，可能难以理解，换种形式如下 GRANT some_privileges ON database_object_type object_name TO username   \u0026ldquo;some_privileges\u0026rdquo; 代表一种权限，例如 \u0026ldquo;SELECT\u0026rdquo;、\u0026ldquo;UPDATE\u0026rdquo; \u0026ldquo;database_object_type\u0026rdquo; 代表一种数据库对象类型，例如 \u0026ldquo;TABLE\u0026rdquo;、\u0026ldquo;SEQUENCE\u0026rdquo; \u0026ldquo;object_name\u0026rdquo; 代表表名 \u0026ldquo;username\u0026rdquo; 则就是用户名了  比如说我现在需要将 \u0026ldquo;testdb\u0026rdquo; 模式中的 \u0026ldquo;student\u0026rdquo; 表查看权限赋予刚刚我们创建的 \u0026ldquo;new_project_user\u0026rdquo; 用户：\nGRANT SELECT ON table student TO new_project_user;  这个时候再用 Navicat连接后去查看 \u0026ldquo;student\u0026quot;表，可以正常访问了。\n具体的权限贴在下放以作记录，如果需要同时赋予多个权限，除了 \u0026ldquo;ALL PRIVILEGES\u0026rdquo; 以外，只需要在多个权限中用 \u0026ldquo;,\u0026rdquo; 隔开就行了。\n 这里是后面学习时候的修修补补：\n 只有创建数据库的权限是特殊权限，而如果要将某个数据库的权限全赋给某个用户，同样使用的是 \u0026ldquo;GRANT\u0026rdquo; 命令，例如：  GRANT ALL PRIVILEGES ON DATABASE testdb TO new_project_user;  \u0026ldquo;REVOKE\u0026rdquo; 是删除权限的命令，忘记举例：  REVOKE CREATE ON SCHEMA public from new_project_user;  ","id":1,"section":"posts","summary":"在学习具体的权限管理之前，需要先了解一下 PostgreSQL中权限的几个层次： 特殊权限，包含超级用户的权限、创建数据库的权限、创建用户以及 L","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记 (三) 用户权限的管理控制","uri":"https://senjianlu.com/2020/02/postgresqlnote03/","year":"2020"},{"content":"psql是 PostgreSQL中的一个命令行工具，类似与 Oracle中的 sqlplus，但是与之不同的是 psql支持运行数据库命令或者直接运行 SQL语句并把结果返回。\n既然是从头开始学习，当然也把这一部分再巩固下为佳。\n 进入psql命令行的方法\nsu - postgres psql  当显示 postgres=# 时就说明已经进入 psql工具下了。\n 基础命令 1、查看所有数据库\n\\l  2、切换数据库\n\\c testdb  3、查看此数据库下的表\n\\d  4、查看表的属性\n\\d [表名]  \\d 的用法很多，不仅可以查看表，也可以查看表的索引或是带上通配符查询\n\\d student_pkey \\d s*  而扩展的 \\d 命令则包含了更多功能\n\\dn # 列出所有schema \\db # 显示所有表空间 \\du # 列出所有的数据库用户 \\dp [表名] # 显示表权限分配情况 ......  更多的指令在输入 \\d 后再补两个 tab键即可查询出来，同期 \\t 之类的也类似。\npsql 的学习到这目前就够用了，因为开发中主要还是用 Navicat来的高效一点，既然刚刚涉及到权限查看了，正好手头上有个多表不同用户的项目，那就下一章先学下权限管理好了。\n","id":2,"section":"posts","summary":"psql是 PostgreSQL中的一个命令行工具，类似与 Oracle中的 sqlplus，但是与之不同的是 psql支持运行数据库命令或者直接运","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记 (二) psql工具的使用","uri":"https://senjianlu.com/2020/02/postgresqlnote02/","year":"2020"},{"content":"由于在学校针对作业和毕设 MySQL已经很够用了，因此也没有做更多对数据库的功课，只知道 Oracle数据库适合企业，MySQL适合小型项目，但是工作以后的第一个项目就接触的是陌生的 PostgreSQL数据库，才发现原来还有这么好用的开源数据库，正好趁武汉肺炎这个被动假期时间把它好好学一遍。\n 主要书籍是 《PostgreSQL修炼之道：从小工到专家》\nJD链接：PostgreSQL修炼之道：从小工到专家\nPDF下载(Google Drive )：POSTGRESQL修炼之道从小工到专家.pdf\n无论如何工具书还是入正比较好，个人是因为快递延缓发货，一边等书一边PDF先学习起来。况且只在读完两章后就感叹唐成老师这本书写的真的很好，对 PostgreSQl的特性和基础SQL语句的解释都很详细，即使是从没这方面基础的也可以收获很多。\n 关于 PostgreSQL的介绍，书中已经写的很详细了，就不再做过多的赘述。\n吸引我的地方无非几点：\n 免费开源（最重要的原因） 有稳定的更新和问题反馈渠道 占用低，即使是阿里的轻量都能跑 Django+PostgreSQL Navicat for PostgreSQL 价格低，150/3月，1000买断，真香  而再看使用上的优点则太多了：\n 支持数据库中创建对象，对多个项目用同数据库的太友好！ 支持列表 list的存取 支持 JSON、xml类型数据的存取 INSERT INTO table VALUES () ON CONFLICT() DO UPDATE/NOTHING 约束时处理（专属神器，太好用了，不知道省了多少时间）  列举几个我没有系统学习之前，用的时候发现的优点，我想在其中总有一个点会戳中后端开发人员的心。\n1、直接开始吧那就！首先当然是 PostgreSQL的安装。\nPostgreSQL支持 Linux、Mac OS和 Windows下安装，而且方法相当简单，由于我是为了部署项目数据库，因此这里以 Centos7为例。\n注：这里安装的是9.2.24版本的,如果需要10+版本的可参考这个博文 Centos7.6安装PostgreSQL10\n运行\nyum install postgresql-server.x86_64  当然在安装前可以先运行\npsql --version  查看下云服务等是否自带了低版本 Postgresql数据库。\n安装之后，记得先初使用化数据库再启动\nservice postgresql initdb service postgresql start service postgresql status  显示running就说明数据库已经安装完成了。\n2、登录到数据库。\nPostgreSQL在安装时默认会添加用户postgres，运行\nsu - postgres  先切换到postgres用户下，再输入\npsql  就进入到 PostgreSQL数据库中了。\n这里推荐先把postgre用户的密码改掉：\nALTER USER postgres WITH PASSWORD \u0026lt;password\u0026gt;;  注意：这里的命令是在数据库中运行的，即 postgres=#: 下。\n3、远程连接，如果你要在 Navicat等工具中使用这个数据库，还需要做些配置。\n首先是 postgresql.conf 文件的配置\nvi /var/lib/psql/data/postgresql.conf  修改\nlisten_addresses = '*' port = 5432 max_connections = 100  保存退出即可。\n然后再修改 pg_hba.conf 这个文件，路径和刚刚相同\nvi /var/lib/psql/data/pg_hba.conf  在最后添加这条\nhost all all 0.0.0.0/0 md5  当然开放访问的 IP 视自己情况而定，这里因为腾讯云服务器安全组全开而且机器连防火墙都没开我也就自暴自弃了，后面会再专做一个项目部署时端口等的初步设置以保障最基础的安全性。\n都保存以后重启 PostgreSQL服务，再尝试远程连接吧！\nservice postgresql restart  至此，PostgreSQL的学习环境就已经安装完成了，如果想升级为开发环境，就像之前强调的一是防火墙要开，端口要适当开放；二是版本最好升级到10+，以使用最新的特性。\n附上书的目录：\n基础篇涉及到所有支持存储的数据类型，并且所有 PostgreSQL的基础操作也都做了详解，是肯定要认真学习并做好笔记的。\n提高篇的 PostgreSQL特有正则表达式很值得学习，索引、序列和锁由于自身之前用的不多，也再过一遍好了。\n而之后的数据库优化和第三方开源软件及架构在这次学习中只会做了解，在项目进行或是完成后再结合实际情况学习可能效果会更好。\n","id":3,"section":"posts","summary":"由于在学校针对作业和毕设 MySQL已经很够用了，因此也没有做更多对数据库的功课，只知道 Oracle数据库适合企业，MySQL适合小型项目，但","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记 (一) 数据库的安装与环境配置","uri":"https://senjianlu.com/2020/02/postgresqlnote01/","year":"2020"},{"content":"突然发现PVE下安装的 LEDE和爱快 不是占用的CPU物理核心，所设置的1核只是限制了最高占用，于是就决定再利用下多下来的2G内存，安装个黑群晖做台式和笔记本之间的文件共享。\n 环境：ProXmoX VE\n需要时间：0.5小时左右\n原教程：【悟空5kong】PVE下部署LEDE+黑群晖NAS双系统（J1900软路由）\n 配置方面\n在已经成型的软路由基础上，新增了两块西数1t的紫盘。\n注意：紫盘主要用作监控存盘，只有5400转，普通家用上7200转的蓝盘组Raid1即可。\n所需的软件及下载地址\n所有文件(Google Drive )：PVE下 黑群晖安装 所需文件\n 黑群晖的安装和配置比较简单，不需要设置网卡之类的，所以直接开始就行了。\n1、首先在PVE下新建虚拟机作为黑群晖的容器。\n先将iso光盘镜像文件 (XPEnoboot_DS3615xs_5.2-5967.1..iso) 上传，这个将作为虚拟机的启动引导。\n接着创建虚拟机，并将其编号按顺序设置为102，注意这个编号要记住，之后挂载硬盘的时候会用到。\n操作系统界面选择刚刚上传的iso文件作为引导。\n硬盘的配置默认即可，如果你的系统硬盘只有32g的话可以缩小，反正也不会用来做存储盘。\n如果黑群晖只用来做文件存储而不装大量套件的话，CPU设置一核心即可。\n亲测即使是传输大量照片等小文件的情况下，200ge的一核占用也只在50%左右。 内存同理，看需求情况，但是2G确实已经很够用了。\n这一步需要注意：桥接的端口千万不要设置在之前进网的Wan口上，而设置在其他任意端口都没有问题！\n网卡则选择 E1000 因为部分黑群晖系统不支持半虚拟化的识别。\n确认无误完成即可。\n2、接着开始机械磁盘的挂载。\n视频教程中并没有这一步，但是这一步是需要放在安装黑群晖系统之前的，不然安装完再挂载会出现进不去系统等玄学问题。\n用Xshell6连接PVE后台，当然用上一篇的MobaX是一样的。\n进去后直接输入\nls -l /dev/disk/by-id/  查看当前系统连接的硬盘情况。\n只需要ata开头的即可，我挂载的是西数的机械，因此就是下面那两块了。\n接着复制这两块硬盘的完整信息。\n ata-WDC_WD10EJRX-89N74Y0_WD-WCC4J3FCD95S\nata-WDC_WD10EJRX-89N74Y0_WD-WCC4J4LZF6VT\n 然后在其前面加上 \u0026ldquo;qm set 102 \u0026ndash;sata2 \u0026quot; 运行即可。\n注：102代表的是你虚拟机的编号；sata2则是之后会显示在黑群晖盘符，自己设置即可\n之后再回虚拟机的硬件页面，就可以看见新增的这两块硬盘了。\n3、然后开始安装黑群晖系统。\n首先更改启动顺序，将CD设置为第一启动项，即我们刚刚上传的iso 接着点击启动虚拟机，启动完成后注意下后台地址。\n浏览器地址栏输入，进入后台页面。\n这里选择手动安装，并上传.pat文件，文件我也提供了下载。\n弹出的会清空硬盘直接同意即可，这里注意二次确认清空盘的个数是否和你挂载的盘加上一个系统盘的总个数相同。\n等待其安装完成自动重启即可。\n之后的配置就比较简单了，用户名密码自己设置即可，由于是黑群晖，联网内容全部跳过。\n至此，黑群晖的安装配置就完成了。\n4、最后就是组Raid，这个比较简单。\n点击左上角的菜单，再选择存储空间管理员。\n选择存储空间\n选择自定义\n选择组成群组 选择你需要组raid的两块硬盘，我这里因为组完了也上传了文件，就用的论坛的图。\n跳出的删除数据提醒，直接确认即可。\n我们这里选你需要的Raid模式，推荐Raid1\n直接应用即可\n然后你就可以看见新建的正常的存储空间了。\n5、为其配置局域网的共享文件夹。\n填入文件夹名族，确认即可。\n选择 此电脑 右键，选择 映射网络驱动器\n填入你的期望盘符和网络文件夹路径即可。\n注：路径的格式由 IP+文件夹名 组成\n黑群晖的安装真的比软路由简单太多了，只需要拿钱堆硬盘就可以了。\n顺便说一句，在组raid方面，群晖提供了很方便的操作，勤整理，raid0和raid1分开是一个很好的习惯。\n附上对raid5等安全性怀疑的讨论：raid5 磁盘阵列真的不安全么？\n没有什么存储方案是一劳永逸的。\n","id":4,"section":"posts","summary":"突然发现PVE下安装的 LEDE和爱快 不是占用的CPU物理核心，所设置的1核只是限制了最高占用，于是就决定再利用下多下来的2G内存，安装个黑群","tags":["硬件"],"title":"PVE下 黑群晖 的安装和硬盘直通组Raid1","uri":"https://senjianlu.com/2020/01/pvesynology/","year":"2020"},{"content":"起因仅仅是不满足现在的科学上网速度，于是就花了点时间研究了下软路由，当然性能够的路由器是可以直接安装lede的，但是手头正好闲下来一块亮机的200ge，索性就再组台小机器来当软路由吧。\n不过我不推荐200ge作为软路由的cpu，不仅功耗大，而且只有2个核心，LEDE和爱快各占用一个以后就不能再安装群晖或是其他虚拟机，容易造成性能浪费的情况。\n 环境：ProXmoX VE\n需要时间：3小时左右\n原教程：【悟空5kong】PVE下部署LEDE+黑群晖NAS双系统（J1900软路由）\n上集-PVE(Proxmox VE)安装双软路由爱快+LEDE保姆级教程\n下集-PVE(Proxmox VE)安装双软路由爱快+LEDE保姆级教程\n 配置单和价格\n 所需的软件及下载地址\n所有文件(Google Drive )：PVE下 LEDE+爱快 双软路由部署 所需文件\n 从这里正式开始操作系统的安装和配置过程。\n注意：除了软路由本机，你还需要一台自己的电脑包括显示器鼠标和键盘。同时如果你是拨号上网，你还需要知道自己的运营商账号密码！\n注：操作系统及软路由的安装都较为简单，繁琐的主要是配置的过程，涉及到网卡上网口的切换以及同步DNS和网关的修改，推荐在看博文之前首先过一遍视频教程，pve和lede的安装参照悟空，而爱快和lede的网口映射参照Video Talk。\n1、首先安装PVE系统，安装过程类似于Windows操作系统：下载iso文件拷贝进U盘，然后开机过程中按Del键进入bios，选择u盘启动来进行安装。\n Management Interface（网卡）：选默认的第一个，之后也做PVE的管理网口 Hostname（域名）：可以瞎填 IP Address：10.10.10.254 以后通过这个IP访问PVE系统，需要和网关同一网段 Netmask（子网掩码）：255.255.255.0 即可，基本默认都是这个 Getway（网关）：10.10.10.253 爱快的后台地址 DNS Server：10.10.10.253 和网关设置一样的即可\n如果不想麻烦推荐和图片一样设置，后续配置可以照抄。  重启过程中拔下u盘，重启后出现以下界面即说明PVE操作系统已经安装完成。\n2、在PVE系统安装完成后，需要将电脑连接到软路由进行接下来的操作，网线的连接比较简单：一头连接正在使用的电脑，另一头连接刚刚配置的PVE连接网口，一般情况下是主板的网口，如果配置的是网卡上的网口，那么离pcie连接口最远的一般就是一号网口。\n物理连接完成后，还需要配置本机的IP和网关等才能进入PVE后台。\n IP 地址：保证和PVE虚拟机的IP在同一网段 子网掩码：默认的 255.255.255.0 默认网关：和PVE的相同 DNS：不配置自动获取即可  打开浏览器，输入PVE安装完成后显示的地址，注意是 https://10.10.10.254:8006/ 前缀和端口号不要忘记。\n注：可能有安全提示，直接跳过即可。\n 用户名：root 密码：PVE安装时设置的密码 语言：默认英文，选择为中文  进入系统的网口选项下，可以看见有一个桥接网口已经建立，端口从属显示与enp1so对应，就是第一个网口，意味着第一个网口就被占用了。\n接下来打开所有物理网口的自动启动。\n为其他所有的空余网口建立虚拟网口为桥接做准备。\n建立的过程很简单，记住上面物理网口的名称，创建一个虚拟网口，只需要再桥接端口填入物理网卡名称即可。\n所有的网口都同样操作即可。一一对应检查完后网口就配置完成了。\n3、接下来开始创建虚拟机，原理和Windows上使用vmplayer等创建虚拟机一样。\n首先来创建LEDE对应的虚拟机，这一部分参考悟空的视频教程更加简单。\n点击创建虚拟机按钮。\n第一步没有需要特殊配置的。\n选择不使用任何介质，这里的安装方法是ssh连接至PVE后直接命令行安装，然后将这个虚拟机挂载在安装完成的文件夹上，更加快捷。\n硬盘不需要任何操作，反正等下不用这个盘。\nCPU核心一核就够了。\n内存推荐2G。\n桥接网口选择管理口即可，模型推荐E1000，Video Talk之后爱快等都会用E100进行配置。\n检查无误点击完成即可。\n接着进行添加网卡的操作，为所有虚拟网口在这台虚拟机中配置桥接。\n接着在本机上下载安装MobaXterm，准备连接PVE系统。\n打开新建一个连接，截图是编辑但也啥差别。\n输入密码，点击Yes连接成功。\n拖拽虚拟机安装文件和转换工具进软路由系统中。\n接下来\nls  确保文件转移成功，接着为img2kvm添加可执行权限，并开始执行img文件的转换\nchmod +x img2kvm ./img2kvm lede.img 101 vm-101-disk-1  101是虚拟机的序号\n接下来回到浏览器的PVE后台界面，可以看到多出来一个未使用的磁盘，这就是刚刚转换完的，无视后缀是 disk-1 还是 disk-2 ，双击，选择添加即可。\n接着选择 \u0026ldquo;选项\u0026rdquo;，\u0026ldquo;引导顺序\u0026rdquo; 更改为刚刚挂载上的新硬盘即可。\n注意：接下来直接重启软路由，断电重启也可以！\n然后回来点击虚拟机，可能LEDE显示会没有反应，点击随意按一个键就可以了。\n至此，最有可能出错的LEDE安装完成，配置的事等到爱快配置完后进行。\n如果你是光纤，不需要拨号，那可以跳过接下来的爱快的安装与配置。\n4、接下来开始安装爱快软路由。\n一样新建虚拟机，此界面的名称可以自由更改，其他保持默认即可。\n存储不用改，iso介质选刚刚上传的ikuai就可以了，类型Linux版本也不用变。\n硬盘2G就够了，配置如图。\nCPU配置也是一核就够了。\n内存的设置要注意，新版本爱快最低4G内存，如果你的内存不够，需要选择较低版本。 网络的配置和LEDE一样，管理口对应的虚拟网口和E1000。\n核对后直接完成即可。\n创建完成后，去虚拟机的硬件管理界面，当前只有一个默认网口，也是当时配置的PVE的管理网口，同时它也是只是一个lan口，lan口通俗来讲就是出网的口，而wan口是进网的口，爱快的作用是拨号，因此我们需要新建一个wan口：选择添加网络设备。\n选择最后一个端口，物理上就是离pcie连接口最近的网口。\n接着启动虚拟机即可。\n爱快的安装还没有结束，进入虚拟机页面，还需要选择安装，如图输入，等待安装完成后的自动重启。如果重启后没有画面或是端口显示断开，按下回车刷新就行了。\n进入系统后，设置lan口IP：10.10.10.253\n接着在浏览器地址栏输入 10.10.10.253 便可进去ikuai的后台了，账号密码均为 admin\n登录后会提示修改管理员密码，改不改都无所谓\n登录进去以后可以看到我们预先配置的两个网口，lan口是绿色的说明正在被正常使用，这个口就是我们设置的PVE管理口兼lan口，而wan口还是灰色的，需要我们点进去绑定以下刚刚新建的网卡。\n注意：此时将家庭数据中心拉出来的网线接到设置的wan口对应的物理网口上！准备进行拨号上网！\n填入运营商账号密码，然后拨号。\n这边显示已连接说明爱快已经拨号上网成功了。\n接下来配置DHCP服务端，选择 DHCP设置 DHCP服务端，进行填写。\n注：DHCP协议的功能为集中的管理、分配IP地址。\n 客户端地址：覆盖网段内的所有ip即可。 子网掩码：默认的 255.255.255.0 网关：10.10.10.252 就是LEDE的后台地址 DNS：如果以科学上网为主选 8.8.8.8 不然就用网络所属运营商的  保存后刷新页面，确认服务正常，爱快软路由的配置就全部完成了。 总之，爱快主要负责拨号上网和提供DHCP服务，在配置完成之后，可以先验证下本机是否有网络在进行下一步操作。\n5、配置LEDE软路由。首先回到LEDE的系统界面，输入以下命令去更改LEDE的IP地址。\nvi /etc/config/network  方向键控制光标找到这一行，按以下 \u0026ldquo;i\u0026rdquo; 键进入编辑模式，更改成 10.10.10.252 就是你想要的LEDE的后台IP地址。\n编辑完成后，按下 \u0026ldquo;Esc\u0026rdquo; 键，左下角有冒号出来后，输入 \u0026ldquo;wq\u0026rdquo; 保存并退出。 之后输入\nreboot  重启LEDE软路由。 接着就可以在本机的浏览器上输入 10.10.10.252 进入LEDE软路由的后台了，默认密码是 koolshare\n进入后台后首先来配置网口。\n选择lan口这一行，点击 编辑。\n首先在物理设置部分将所有的网口都勾选上，因为有爱快的情况下LEDE不需要wan口。\n然后回到基本设置，如图设置。\n IP：LEDE后台地址 10.10.10.252 网关：爱快的后台地址 10.10.10.253 DNS服务器：和刚刚一样填写即可  接着下滑，到DHCP服务器部分，因为LEDE是作为爱快下的二级路由存在的，我希望所有的DHCP服务都由LEDE来提供而不是不具有科学上网功能的爱快来提供，因此要去掉 忽略此接口 的勾选。然后还要去高级设置中，再把 强制 的勾勾上。\n接着保存即可。\n由于LEDE用不到wan口，所以将wan口和wan6的接口绑定到空的接口上就可以了。\n至此LEDE的安装和配置就全部完成了，修改以下本机的网络设置，将ip和dns都勾选至自动获取，看看能不能上网吧！\n6、确保可以上网后，我们回到LEDE的后台，准备进行科学上网等的配置操作。\n点击左侧菜单中的 酷软中心，进入的时候如果提示更新，千万不要去更新，新版本会有大量的软件无法使用。 一般情况下，即使你不更新进入酷软中心，也无法再在商城找到科学上网的工具，在19年6月份的更新中，酷软就将这几个插件删去了。你可以选择去下载网友提供的包离线安装，但很大几率上是不兼容新版本系统的，这里推荐使用酷软的系统备份还原，直接将系统回复至有插件的版本。\n选择 系统 备份/升级\n选择我上面提供的老版本，再点击上传备份。上传之后系统会自动重启。\n等待重启完成后，再进入酷软中心就可以看到消失的科学上网插件了！\n节点的配置就不再阐述了，ssr和ss订阅的稳定性在我实际用下来后觉得并不好，不如只在电脑端开启相应代理，而v2ray则比较稳定，基本全天24小时节点都不会出现断连情况。\n 推荐2家供应商：\n忍者云 有线路提供v2ray代理，稳定\n奇幻之旅 便宜实在\n 至此，PVE下 LEDE+爱快 双软路由的部署就全部完成了，好好享受世界吧！\n","id":5,"section":"posts","summary":"起因仅仅是不满足现在的科学上网速度，于是就花了点时间研究了下软路由，当然性能够的路由器是可以直接安装lede的，但是手头正好闲下来一块亮机的","tags":["硬件"],"title":"PVE下 LEDE+爱快 双软路由部署","uri":"https://senjianlu.com/2020/01/pveledeikuai/","year":"2020"},{"content":"虽然也有免费的可以用，但是既然软路由已经配置了方便的上网环境，Github访问起来比以前便利了许多，那就把图床直接部署在Github上好了，虽然隐私性是一缺点，但是主要也是给博客使用，也就无所谓了。\n 环境：Windows 10 64位\n需要时间：0.5小时左右\n原教程：CSDN PicGo + GitHub 搭建个人图床工具\n 1、在Github上新建仓库，并在Settings中设置为Public\n2、创建token，为了给PicGo客户端配置，使其能上传给对应Github仓库。\n描述可以随便填写，但是repo对应的需要全部勾选。\n注意：token只出现一次！所以一定要保存！\n3、下载\u0026amp;安装PicGo。\n PicGo （目前 2.2.1）是一个开源的图床工具，非常优秀。\n Git地址：https://github.com/Molunerfinn/PicGo\nWindows版下载地址：https://github.com/Molunerfinn/PicGo/releases\n4、配置PicGo\n 仓库名：账号名+仓库名 分支名：master Token：刚刚保存的token 存储路径：img/ 自定义域名：https://raw.githubusercontent.com/账号名/仓库名/master  配置点击设为默认图床，然后确定即可。\n至此，Windows下PicGo+GitHub的个人图床工具搭建完成，通过微信或者QQ截图完成，默认剪贴板中是图片的情况下，直接Ctrl+Shift+P即可将图片上床图床，而md格式的图片链接也会替换至剪贴板，直接粘贴在所需地方即可。\n","id":6,"section":"posts","summary":"虽然也有免费的可以用，但是既然软路由已经配置了方便的上网环境，Github访问起来比以前便利了许多，那就把图床直接部署在Github上好了，","tags":[],"title":"Windows下 PicGo+GitHub 搭建个人图床工具","uri":"https://senjianlu.com/2020/01/picgogithub/","year":"2020"},{"content":"确确实实感觉记性越来越差，有记录包括“问题解决方法”、“配置文件修改”等信息的需求了，但同时也希望一切从简，听从V友建议选用Hugo+Github Pages免费搭建个静态博客来做树洞吧。\n 环境：Windows 10 64位\n需要时间：1小时左右\n原教程：CSDN Windows下搭建Hugo博客\n 1：在https://github.com/gohugoio/hugo/releases地址下找到Windows压缩文件下载，如下图64位的。\n2：新建Hugo和Hugo/bin文件夹，将下载下来的.exe文件放入bin文件夹，并添加至环境变量中。\n3：在cmd中输入\nhugo version  检测是否安装成功，安装成功后进入Hugo文件夹中，输入\nhugo new site myblog  myblog替换成想要的博客文件夹名字。\n4：进入新建的博客文件夹下，可以看见项目结构：content存放内容，themes用来存放主题，config.toml用来配置文件，这也是这次初步建立需要博客需要改的内容。\n5：建完文件夹后先去挑选主题，在https://themes.gohugo.io/选择自己喜欢的主题进行下载，这次我使用hugo-theme-m10c这款主题，因为选择它避免配置config.toml文件而花费大量时间。\n6：cmd进入博客文件夹下，执行以下命令把github上的主题文件clone到对应文件夹下 themes/m10c\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  7：此时就已经在本地运行博客做确认了，执行\nhugo server -t m10c --buildDrafts  启动项目，然后前往 http://localhost:1313/ 就可以看到了。\n8：接下来开始新建一篇博客，使用Hugo很大程度上就是看中了它将.md文件渲染成静态博客页面的能力，即使是发布完成后，原稿也可以保存方便脱机查看。\n首选Ctrl+C结束本地的预览，然后新建博文对应的.md文件。\nhugo new post/blog.md  新建的.md文件会存储在content/post中，直接前往进行编辑即可。\n9：推荐使用VS Code进行编辑，左上角的预览按钮，点击后可以将窗口分为左右两部分用于查看实施效果。 注意：draft: true 需要改为 draft: false 图中并未做修改，如果不修改就是草稿，不会在博文页面上显示内容！\n写完后直接Ctrl+S保存即可。\n10：再次本地启动项目，可以看见已经有对应的博文了。至此，本地博客环境就算配置完成了。\nhugo server -t m10c --buildDrafts  11：Github位每个账号提供了一个免费的空间来存储静态的html、js和css，而我们就可以借此来发布博客。 首先去新建仓库，注意命名，这是github辨别是否为网络空间的依据。\n仓库名需满足 账户名.github.io 的命名规范，然后点击绿色的Create按钮进行创建。\n我因为已经部署完成，因此这里显示重复创建。\n12：创建完成后，回到myblog博客目录，执行以下命令来生成public目录，也就是github仓库所需的静态博客的文件。（后续都用的原博客的图，路径可能有偏差，都是基础的git操作）\nhugo --theme=m10c --baseUrl=\u0026quot;地址\u0026quot; --buildDrafts  13：进入public文件夹，将所有文件添加、提交到本地。\ngit init git add. git commit -m \u0026quot;附言\u0026quot;  14：将本地public与github进行关联后，进行推送，第一次推送会需要输入github的账号密码。\ngit add origin http://github.com/m1801823/m1801823.github.io.git git push -u origin master  15：等待推送完成后，刷新github页面，对应的文件就上传上来了，这时候输入http://账户名.github.io 就可以访问了\n16：如果自己有域名的话，也可以配置DNS直接让域名解析到你的静态博客上，方便告诉好友你的博客网址。\n这里以在namecheap.com上购买的域名为例，不推荐阿里云和腾讯云，只因为管局备案太麻烦。\n首先选择已有域名进入管理面板。\n然后新增或者修改DNS解析记录，对应以下修改即可，只需要把CNAME Record 的Value修改成你的地址即可。\n最后回到Github的仓库部分，选择Settings,拉到Custom domain部分修改成你的域名保存。\n大概5分钟左右，域名就会解析到你的博客，在开始的几天是不支持https的，只能先用http://你的域名进行访问。\n之后如果https加密可用，则需要更改一下模板，在head部分加上\n\u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;upgrade-insecure-requests\u0026quot;\u0026gt;  来自动将http的不安全请求升级为https，否则可能出现css等加载不出来的情况。\n至此基于Hugo和Github Pages的静态博客搭建完成，开始养成记录的好习惯吧！\n","id":7,"section":"posts","summary":"确确实实感觉记性越来越差，有记录包括“问题解决方法”、“配置文件修改”等信息的需求了，但同时也希望一切从简，听从V友建议选用Hugo+Git","tags":[],"title":"Windows下 Hugo+Github Pages 搭建静态博客","uri":"https://senjianlu.com/2020/01/hugogithubpages/","year":"2020"},{"content":"服务器的部署笔记。\n 各部分功能介绍：\n Nginx是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。 Uwsgi负责多线程，即支持多人同时访问网站。 Django是由Python编写的开源Web应用框架，适合个人小项目搭建。   服务器系统为Centos7，当然记录的所有命令再更高版本上也都可以使用。\n1、既然搭建的是Python项目，首先升级以下服务器端的Python版本，默认linux自带python2，我们把它先升级为python3。\n安装依赖软件\nyum -y install sqlite-devel yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel  下载安装python3.6\nwget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz tar zxvf Python-3.6.1.tgz cd Python-3.6.1 ./configure --prefix=/usr/local/python3 make \u0026amp;\u0026amp; make install  创建python及pip命令软链接\nln -s /usr/local/python3/bin/python3 /usr/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3  这样python3就已经安装完成了，键入 python3 再回车就可以进入python编译了。\n注：Ctrl+Z退出python编译\n2、接下来安装Django并配置项目，这里选择的版本是 2.1.8，单纯的因为够用且稳定，新版本的环境配置没有前人指导。\npip3 install django==2.1.8  等待安装完成后，上传Django项目到服务器上任意目录，使用Xftp或者git clone都可以\ncd 项目文件夹 python3 manage.py runserver 0.0.0.0:80  注意，运行项目时可能报错：\n You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run \u0026lsquo;python manage.py migrate\u0026rsquo; to apply them.\n 这时只需要按照提示，输入以下内容即可\npython3 manage.py migrate  出现以下信息则说明启动成功。\n注意： 如果访问页面出现了以下错误，那么进入你的项目，修改 settings.py 将 ALLOWED——HOSTS = [] 修改为 ['*'] 即可解决。\n DisallowedHost at / Invalid HTTP_HOST header: \u0026lsquo;47.56.227.27\u0026rsquo;. You may need to add \u0026lsquo;47.56.227.27\u0026rsquo; to ALLOWED_HOSTS.\n 至此，python环境与Django环境就安装完成。\n3、接下来安装uwsgi web网关。\n首先下载安装uwsgi\nwget http://projects.unbit.it/downloads/uwsgi-2.0.1.tar.gz tar zxvf uwsgi-2.0.1.tar.gz cd uwsgi-2.0.1 python3 uwsgiconfig.py --build cp -R /home/uwsgi-2.0.1 /usr/local/uwsgi ln -s /usr/local/uwsgi/uwsgi /usr/bin/uwsgi  然后测试uwsgi是否安装成功，创建测试文件\nvi test.py  文件内容为：\ndef application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) return [b\u0026quot;Hello World\u0026quot;]  输入完成后 :wq 保存，然后执行以下命令进行测试。\n/usr/local/uwsgi/uwsgi --http :9090 --wsgi-file /home/test.py   防火墙开放端口指令：\n======== firewall ========\nfirewall-cmd \u0026ndash;list-all | 查看当前开放的所有端口\nfirewall-cmd \u0026ndash;add-port=80/tcp \u0026ndash;permanent | 80替换为你需要开放的端口\nfirewall-cmd \u0026ndash;reload ======== iptables ========\niptables -L -n -v | 查看当前开放的所有端口\niptables -A INPUT -p tcp \u0026ndash;dport 80 -j ACCEPT | 80替换为你需要开放的端口\n详细命令：https://man.linuxde.net/iptables\n然后去对应服务商的安全组处开放安全组。这里就以阿里云国际为例。  前往你的 ip:9090 出现 Hello World 就说明uwsgi的安装已经完成了！\n4、开始Uwsgi和Django结合，执行\nuwsgi --http :9090 --chdir /home/Django项目文件夹 --wsgi-file Django项目(与manage.py同级)/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9192  同样访问 ip:9090 ，如果可以访问django页面则说明成功。\n注：如果在访问django项目时静态文件加载失败可以先忽略，在nginx配置中会指定静态文件路径，配置后可以正常访问。\n5、安装Nginx\n首先下载安装依赖第三方软件pcre\nwget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.34/pcre-8.34.tar.bz2 tar jxvf pcre-8.34.tar.bz2   如果报错：bzip2: Cannot exec: No such file or directory\n执行：yum -y install bzip2\n cd pcre-8.34 ./configure --enable-utf8 make \u0026amp;\u0026amp; make install  下载安装依赖第三方软件openssl\nwget http://distfiles.macports.org/openssl/openssl-1.0.2h.tar.gz tar zxvf openssl-1.0.2h.tar.gz  下载安装nginx\nwget http://nginx.org/download/nginx-1.9.9.tar.gz tar zxvf nginx-1.9.9.tar.gz ./configure --prefix=/usr/local/nginx --with-pcre --with-http_stub_status_module --with-http_ssl_module --with-openssl=/home/openssl-1.0.2h --with-http_gzip_static_module --with-http_sub_module --with-cc=/usr/bin/gcc make install  新建www用户\nuseradd -s /sbin/nologin -M www  备份、修改nginx配置文件\ncd /usr/local/nginx/conf cp -f nginx.conf nginx.conf_bak vi nginx.conf (修改文件) user www; #修改启动用户为www worker_processes 4; #启动4个进程，根据实际需求配置  启动nginx\ncd /usr/local/nginx/sbin ./nginx   如果报错：nginx: [emerg] still could not bind()\n说明80端口目前被占用\n执行：netstat -apn | grep 80\n然后：kill -9 26105\n26105为搜索出来的 0.0.0.0/80 对应的PID\n注意：需要删除5-6次，因为执行的适合有进程保护\n 再访问 ip:80 显示nginx页面说明nginx安装成功。\n6、Nginx+Uwsgi+Django 三者连携。\n首先在Django项目文件夹中创建 uwsgi.ini\nvi uwsgi.ini (文件内容) [uwsgi] #uwsgi启动端口 socket = 127.0.0.1:9090 #django项目目录 chdir=/home/SteamCash module=SteamCash.wsgi master = true processes=2 threads=2 max-requests=2000 chmod-socket=664 vacuum=true # 日志路径 daemonize = /home/SteamCash/logs/uwsgi.log  配置Nginx\nvi /usr/local/nginx/conf/nginx.conf (文件内容) ...... server { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; # 选择为你项目的static文件夹 location /static { alias /home/SteamCash/static; } location / { include uwsgi_params; uwsgi_pass 127.0.0.1:9090; root html; index index.html index.htm; } ......  启动uwsgi\nuwsgi --ini /home/SteamCash/uwsgi.ini  启动nginx\n./usr/local/nginx/sbin/nginx  接着访问页面即可。\n","id":8,"section":"posts","summary":"服务器的部署笔记。 各部分功能介绍： Nginx是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。 Uw","tags":["Python"],"title":"Centos7下 Nginx+Uwsgi 配置Django项目","uri":"https://senjianlu.com/2020/01/centos7nginxuwsgidjango/","year":"2020"},{"content":"如果你急于解决爬虫 Http 代理池访问 Https 出错，并且自己有境外服务器的话，我直接给出解决方案：服务器搭建 socks5 代理并在代码中以 socks5h://账号:密码@IP:端口 的格式使用\n以python为例：\nproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5h://username123:passwd456@128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5h://username123:passwd456@128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r 注意： 代理的协议选择要使用 socks5h，下面我会放使用 http 和 socks5 产生的错误供参考。\n1、使用 Http 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  requests.exceptions.ProxyError: HTTPSConnectionPool(host='steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by ProxyError(\u0026lsquo;Cannot connect to proxy.', ConnectionResetError(10054, \u0026lsquo;远程主机强迫关闭了一个现有的连接。', None, 10054, None)))\n 2、使用 Https 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;https://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  requests.exceptions.ProxyError: HTTPSConnectionPool(host='steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by ProxyError(\u0026lsquo;Cannot connect to proxy.', ConnectionResetError(10054, \u0026lsquo;远程主机强迫关闭了一个现有的连接。', None, 10054, None)))\n 3、使用 Socks5 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  socks.GeneralProxyError: Socket error: 0x05: Connection refused\nrequests.exceptions.ConnectionError: SOCKSHTTPSConnectionPool(host='steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by NewConnectionError(\u0026lsquo;\u0026lt;urllib3.contrib.socks.SOCKSHTTPSConnection object at 0x03C29450\u0026gt;: Failed to establish a new connection: 0x05: Connection refused\u0026rsquo;))\n 4、最后使用 Socks5 代理，但是协议处变为 socks5h：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Cahhse\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5h://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5h://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  proxy 200 b\u0026rsquo;{\u0026ldquo;success\u0026rdquo;:true,\u0026ldquo;lowest_price\u0026rdquo;:\u0026ldquo;$0.18\u0026rdquo;,\u0026ldquo;volume\u0026rdquo;:\u0026ldquo;210,212\u0026rdquo;,\u0026ldquo;median_price\u0026rdquo;:\u0026ldquo;$0.18\u0026rdquo;}\u0026rsquo;\n 返回了我需要的数据，成功。\n 在处理这个问题的时候，感觉把学的网络全还给了老师。\n首先我们需要知道的是 Http 属于应用层，而 Socks5 属于会话层，这就意味着 Socks5 所能代理的范围会比 Http 协议更广。\n最后附上服务端代理的搭建教程：\nHttp代理：CentOS 7 搭建 TinyProxy 代理\nSocks5代理：Github Socks5 一键脚本\nbbr加速：CentOS/Debian/Ubuntu系统 TCP-BBR 一键安装脚本 （如果需要请在安装代理之前执行）\n","id":9,"section":"posts","summary":"如果你急于解决爬虫 Http 代理池访问 Https 出错，并且自己有境外服务器的话，我直接给出解决方案：服务器搭建 socks5 代理并在代码中以 socks5h://账号:密","tags":["Python"],"title":"Centos7下配置Http和Socks5代理服务端 用以代理Https解决爬虫ssl错误","uri":"https://senjianlu.com/2020/01/centos7httpandsocks5proxy/","year":"2020"}],"tags":[{"title":"PostgreSQL","uri":"https://senjianlu.com/tags/postgresql/"},{"title":"Python","uri":"https://senjianlu.com/tags/python/"},{"title":"硬件","uri":"https://senjianlu.com/tags/%E7%A1%AC%E4%BB%B6/"}]}